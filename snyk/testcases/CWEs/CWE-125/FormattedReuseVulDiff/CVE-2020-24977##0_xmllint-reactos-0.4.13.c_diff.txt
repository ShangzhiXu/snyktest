--- /home/V1SCAN/CWE-125/FormattedUsed/xmllint-reactos-0.4.13.c	2023-12-10 02:50:44.385643388 +0900
+++ /home/V1SCAN/CWE-125/FormattedVul/OLD##CVE-2020-24977##0##GNOME@@libxml2##xmllint.c	2023-12-10 02:50:45.655646765 +0900
@@ -180,17 +180,17 @@
 #ifdef LIBXML_READER_ENABLED
 static int stream = 0;
 static int walker = 0;
+#ifdef LIBXML_PATTERN_ENABLED
+static const char *pattern = NULL;
+static xmlPatternPtr patternc = NULL;
+static xmlStreamCtxtPtr patstream = NULL;
+#endif
 #endif /* LIBXML_READER_ENABLED */
 static int chkregister = 0;
 static int nbregister = 0;
 #ifdef LIBXML_SAX1_ENABLED
 static int sax1 = 0;
 #endif /* LIBXML_SAX1_ENABLED */
-#ifdef LIBXML_PATTERN_ENABLED
-static const char *pattern = NULL;
-static xmlPatternPtr patternc = NULL;
-static xmlStreamCtxtPtr patstream = NULL;
-#endif
 #ifdef LIBXML_XPATH_ENABLED
 static const char *xpathquery = NULL;
 #endif
@@ -482,7 +482,7 @@
 #endif
 /************************************************************************
  *									*
- *			HTML ouput					*
+ *			HTML output					*
  *									*
  ************************************************************************/
 static char buffer[50000];
@@ -502,7 +502,7 @@
  * xmlHTMLPrintFileInfo:
  * @input:  an xmlParserInputPtr input
  *
- * Displays the associated file and line informations for the current input
+ * Displays the associated file and line information for the current input
  */
 
 static void xmlHTMLPrintFileInfo(xmlParserInputPtr input) {
@@ -1555,8 +1555,7 @@
     xmlSchemaValidCtxtPtr vctxt;
 
     vctxt = xmlSchemaNewValidCtxt(wxschemas);
-    xmlSchemaSetValidErrors(vctxt, (xmlSchemaValidityErrorFunc)fprintf,
-                            (xmlSchemaValidityWarningFunc)fprintf, stderr);
+    xmlSchemaSetValidErrors(vctxt, xmlGenericError, xmlGenericError, NULL);
     xmlSchemaValidateSetFilename(vctxt, filename);
 
     ret = xmlSchemaValidateStream(vctxt, buf, 0, handler, (void *)user_data);
@@ -1974,7 +1973,7 @@
     }
     for (i = 0; i < cur->nodesetval->nodeNr; i++) {
       node = cur->nodesetval->nodeTab[i];
-      xmlNodeDumpOutput(buf, node->doc, node, 0, 0, NULL);
+      xmlNodeDumpOutput(buf, NULL, node, 0, 0, NULL);
       xmlOutputBufferWrite(buf, 1, "\n");
     }
     xmlOutputBufferClose(buf);
@@ -2074,13 +2073,17 @@
   else if ((html) && (push)) {
     FILE *f;
 
+    if ((filename[0] == '-') && (filename[1] == 0)) {
+      f = stdin;
+    } else {
 #if defined(_WIN32) || defined(__DJGPP__) && !defined(__CYGWIN__)
-    f = fopen(filename, "rb");
+      f = fopen(filename, "rb");
 #elif defined(__OS400__)
-    f = fopen(filename, "rb");
+      f = fopen(filename, "rb");
 #else
-    f = fopen(filename, "r");
+      f = fopen(filename, "r");
 #endif
+    }
     if (f != NULL) {
       int res;
       char chars[4096];
@@ -2636,9 +2639,9 @@
                         "Couldn't allocate validation context\n");
         exit(-1);
       }
-      cvp->userData = (void *)stderr;
-      cvp->error = (xmlValidityErrorFunc)fprintf;
-      cvp->warning = (xmlValidityWarningFunc)fprintf;
+      cvp->userData = NULL;
+      cvp->error = xmlGenericError;
+      cvp->warning = xmlGenericError;
 
       if ((timing) && (!repeat)) {
         startTimer();
@@ -2672,9 +2675,9 @@
     if ((timing) && (!repeat)) {
       startTimer();
     }
-    cvp->userData = (void *)stderr;
-    cvp->error = (xmlValidityErrorFunc)fprintf;
-    cvp->warning = (xmlValidityWarningFunc)fprintf;
+    cvp->userData = NULL;
+    cvp->error = xmlGenericError;
+    cvp->warning = xmlGenericError;
     if (!xmlValidateDocument(cvp, doc)) {
       xmlGenericError(xmlGenericErrorContext, "Document %s does not validate\n",
                       filename);
@@ -2704,10 +2707,8 @@
       flag |= XML_SCHEMATRON_OUT_QUIET;
     ctxt = xmlSchematronNewValidCtxt(wxschematron, flag);
 #if 0
-	xmlSchematronSetValidErrors(ctxt,
-		(xmlSchematronValidityErrorFunc) fprintf,
-		(xmlSchematronValidityWarningFunc) fprintf,
-		stderr);
+	xmlSchematronSetValidErrors(ctxt, xmlGenericError, xmlGenericError,
+                NULL);
 #endif
     ret = xmlSchematronValidateDoc(ctxt, doc);
     if (ret == 0) {
@@ -2735,8 +2736,7 @@
     }
 
     ctxt = xmlRelaxNGNewValidCtxt(relaxngschemas);
-    xmlRelaxNGSetValidErrors(ctxt, (xmlRelaxNGValidityErrorFunc)fprintf,
-                             (xmlRelaxNGValidityWarningFunc)fprintf, stderr);
+    xmlRelaxNGSetValidErrors(ctxt, xmlGenericError, xmlGenericError, NULL);
     ret = xmlRelaxNGValidateDoc(ctxt, doc);
     if (ret == 0) {
       fprintf(stderr, "%s validates\n", filename);
@@ -2760,8 +2760,7 @@
     }
 
     ctxt = xmlSchemaNewValidCtxt(wxschemas);
-    xmlSchemaSetValidErrors(ctxt, (xmlSchemaValidityErrorFunc)fprintf,
-                            (xmlSchemaValidityWarningFunc)fprintf, stderr);
+    xmlSchemaSetValidErrors(ctxt, xmlGenericError, xmlGenericError, NULL);
     ret = xmlSchemaValidateDoc(ctxt, doc);
     if (ret == 0) {
       fprintf(stderr, "%s validates\n", filename);
@@ -2989,10 +2988,10 @@
       "\t--stream : use the streaming interface to process very large files\n");
   fprintf(f,
           "\t--walker : create a reader and walk though the resulting doc\n");
-#endif /* LIBXML_READER_ENABLED */
 #ifdef LIBXML_PATTERN_ENABLED
   fprintf(f, "\t--pattern pattern_value : test the pattern support\n");
 #endif
+#endif /* LIBXML_READER_ENABLED */
   fprintf(f, "\t--chkregister : verify the node registration code\n");
 #ifdef LIBXML_SCHEMAS_ENABLED
   fprintf(f, "\t--relaxng schema : do RelaxNG validation against the schema\n");
@@ -3290,6 +3289,12 @@
                (!strcmp(argv[i], "--walker"))) {
       walker++;
       noout++;
+#ifdef LIBXML_PATTERN_ENABLED
+    } else if ((!strcmp(argv[i], "-pattern")) ||
+               (!strcmp(argv[i], "--pattern"))) {
+      i++;
+      pattern = argv[i];
+#endif
     }
 #endif /* LIBXML_READER_ENABLED */
 #ifdef LIBXML_SAX1_ENABLED
@@ -3335,12 +3340,6 @@
     } else if ((!strcmp(argv[i], "-path")) || (!strcmp(argv[i], "--path"))) {
       i++;
       parsePath(BAD_CAST argv[i]);
-#ifdef LIBXML_PATTERN_ENABLED
-    } else if ((!strcmp(argv[i], "-pattern")) ||
-               (!strcmp(argv[i], "--pattern"))) {
-      i++;
-      pattern = argv[i];
-#endif
 #ifdef LIBXML_XPATH_ENABLED
     } else if ((!strcmp(argv[i], "-xpath")) || (!strcmp(argv[i], "--xpath"))) {
       i++;
@@ -3434,10 +3433,8 @@
     }
     ctxt = xmlSchematronNewParserCtxt(schematron);
 #if 0
-	xmlSchematronSetParserErrors(ctxt,
-		(xmlSchematronValidityErrorFunc) fprintf,
-		(xmlSchematronValidityWarningFunc) fprintf,
-		stderr);
+	xmlSchematronSetParserErrors(ctxt, xmlGenericError, xmlGenericError,
+                NULL);
 #endif
     wxschematron = xmlSchematronParse(ctxt);
     if (wxschematron == NULL) {
@@ -3467,8 +3464,7 @@
       startTimer();
     }
     ctxt = xmlRelaxNGNewParserCtxt(relaxng);
-    xmlRelaxNGSetParserErrors(ctxt, (xmlRelaxNGValidityErrorFunc)fprintf,
-                              (xmlRelaxNGValidityWarningFunc)fprintf, stderr);
+    xmlRelaxNGSetParserErrors(ctxt, xmlGenericError, xmlGenericError, NULL);
     relaxngschemas = xmlRelaxNGParse(ctxt);
     if (relaxngschemas == NULL) {
       xmlGenericError(xmlGenericErrorContext,
@@ -3491,8 +3487,7 @@
       startTimer();
     }
     ctxt = xmlSchemaNewParserCtxt(schema);
-    xmlSchemaSetParserErrors(ctxt, (xmlSchemaValidityErrorFunc)fprintf,
-                             (xmlSchemaValidityWarningFunc)fprintf, stderr);
+    xmlSchemaSetParserErrors(ctxt, xmlGenericError, xmlGenericError, NULL);
     wxschemas = xmlSchemaParse(ctxt);
     if (wxschemas == NULL) {
       xmlGenericError(xmlGenericErrorContext,
@@ -3506,12 +3501,8 @@
     }
   }
 #endif /* LIBXML_SCHEMAS_ENABLED */
-#ifdef LIBXML_PATTERN_ENABLED
-  if ((pattern != NULL)
-#ifdef LIBXML_READER_ENABLED
-      && (walker == 0)
-#endif
-  ) {
+#if defined(LIBXML_READER_ENABLED) && defined(LIBXML_PATTERN_ENABLED)
+  if ((pattern != NULL) && (walker == 0)) {
     patternc = xmlPatterncompile((const xmlChar *)pattern, NULL, 0, NULL);
     if (patternc == NULL) {
       xmlGenericError(xmlGenericErrorContext, "Pattern %s failed to compile\n",
@@ -3520,7 +3511,7 @@
       pattern = NULL;
     }
   }
-#endif /* LIBXML_PATTERN_ENABLED */
+#endif /* LIBXML_READER_ENABLED && LIBXML_PATTERN_ENABLED */
   for (i = 1; i < argc; i++) {
     if ((!strcmp(argv[i], "-encode")) || (!strcmp(argv[i], "--encode"))) {
       i++;
@@ -3566,7 +3557,7 @@
       i++;
       continue;
     }
-#ifdef LIBXML_PATTERN_ENABLED
+#if defined(LIBXML_READER_ENABLED) && defined(LIBXML_PATTERN_ENABLED)
     if ((!strcmp(argv[i], "-pattern")) || (!strcmp(argv[i], "--pattern"))) {
       i++;
       continue;
@@ -3648,7 +3639,7 @@
     xmlSchemaFree(wxschemas);
   xmlRelaxNGCleanupTypes();
 #endif
-#ifdef LIBXML_PATTERN_ENABLED
+#if defined(LIBXML_READER_ENABLED) && defined(LIBXML_PATTERN_ENABLED)
   if (patternc != NULL)
     xmlFreePattern(patternc);
 #endif
