--- /home/V1SCAN/CWE-125/FormattedUsed/ssl_cli-TizenRT-3.0GBM.c	2023-12-10 02:51:50.648372739 +0900
+++ /home/V1SCAN/CWE-125/FormattedPatch/NEW##CVE-2018-9988##1##ARMmbed@@mbedtls##ssl_cli.c	2023-12-10 02:51:51.908362866 +0900
@@ -1,21 +1,3 @@
-/****************************************************************************
- *
- * Copyright 2016 Samsung Electronics All Rights Reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
- * either express or implied. See the License for the specific
- * language governing permissions and limitations under the License.
- *
- ****************************************************************************/
-
 /*
  *  SSLv3/TLSv1 client-side functions
  *
@@ -451,13 +433,6 @@
     return;
   }
 
-#if defined(MBEDTLS_OCF_PATCH)
-  if (ssl->conf->mfl_code > UCHAR_MAX) {
-    MBEDTLS_SSL_DEBUG_MSG(1, ("max fragment length too large"));
-    return;
-  }
-#endif
-
   MBEDTLS_SSL_DEBUG_MSG(3,
                         ("client hello, adding max_fragment_length extension"));
 
@@ -472,11 +447,7 @@
   *p++ = 0x00;
   *p++ = 1;
 
-#if defined(MBEDTLS_OCF_PATCH)
-  *p++ = (unsigned char)ssl->conf->mfl_code;
-#else
   *p++ = ssl->conf->mfl_code;
-#endif
 
   *olen = 5;
 }
@@ -669,74 +640,6 @@
 }
 #endif /* MBEDTLS_SSL_ALPN */
 
-#if defined(MBEDTLS_SSL_CLIENT_RPK)
-static void ssl_write_client_certificate_type_ext(mbedtls_ssl_context *ssl,
-                                                  unsigned char *buf,
-                                                  size_t *olen) {
-  unsigned char *p = buf;
-  const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
-
-  *olen = 0;
-
-  if (!ssl->conf->client_rpk) {
-    return;
-  }
-
-  MBEDTLS_SSL_DEBUG_MSG(
-      3, ("client hello, adding client certificate type extension"));
-
-  if (end < p || (size_t)(end - p) < 6) {
-    MBEDTLS_SSL_DEBUG_MSG(1, ("buffer too small"));
-    return;
-  }
-
-  *p++ = (unsigned char)((MBEDTLS_TLS_EXT_CLIENT_CERTIFICATE_TYPE >> 8) & 0xFF);
-  *p++ = (unsigned char)((MBEDTLS_TLS_EXT_CLIENT_CERTIFICATE_TYPE));
-
-  *p++ = 0x00;
-  *p++ = 2;
-
-  *p++ = 1;
-  *p++ = MBEDTLS_TLS_CERT_TYPE_RAW_PUBLIC_KEY;
-
-  *olen = 6;
-}
-#endif /* MBEDTLS_SSL_CLIENT_RPK */
-
-#if defined(MBEDTLS_SSL_SERVER_RPK)
-static void ssl_write_server_certificate_type_ext(mbedtls_ssl_context *ssl,
-                                                  unsigned char *buf,
-                                                  size_t *olen) {
-  unsigned char *p = buf;
-  const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
-
-  *olen = 0;
-
-  if (!ssl->conf->server_rpk) {
-    return;
-  }
-
-  MBEDTLS_SSL_DEBUG_MSG(
-      3, ("client hello, adding server certificate type extension"));
-
-  if (end < p || (size_t)(end - p) < 6) {
-    MBEDTLS_SSL_DEBUG_MSG(1, ("buffer too small"));
-    return;
-  }
-
-  *p++ = (unsigned char)((MBEDTLS_TLS_EXT_SERVER_CERTIFICATE_TYPE >> 8) & 0xFF);
-  *p++ = (unsigned char)((MBEDTLS_TLS_EXT_SERVER_CERTIFICATE_TYPE));
-
-  *p++ = 0x00;
-  *p++ = 2;
-
-  *p++ = 1;
-  *p++ = MBEDTLS_TLS_CERT_TYPE_RAW_PUBLIC_KEY;
-
-  *olen = 6;
-}
-#endif /* MBEDTLS_SSL_SERVER_RPK */
-
 /*
  * Generate random bytes for ClientHello
  */
@@ -778,48 +681,6 @@
   return (0);
 }
 
-/**
- * \brief           Validate cipher suite against config in SSL context.
- *
- * \param suite_info    cipher suite to validate
- * \param ssl           SSL context
- * \param min_minor_ver Minimal minor version to accept a cipher suite
- * \param max_minor_ver Maximal minor version to accept a cipher suite
- *
- * \return          0 if valid, else 1
- */
-static int ssl_validate_ciphersuite(const mbedtls_ssl_ciphersuite_t *suite_info,
-                                    const mbedtls_ssl_context *ssl,
-                                    int min_minor_ver, int max_minor_ver) {
-  (void)ssl;
-  if (suite_info == NULL)
-    return (1);
-
-  if (suite_info->min_minor_ver > max_minor_ver ||
-      suite_info->max_minor_ver < min_minor_ver)
-    return (1);
-
-#if defined(MBEDTLS_SSL_PROTO_DTLS)
-  if (ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM &&
-      (suite_info->flags & MBEDTLS_CIPHERSUITE_NODTLS))
-    return (1);
-#endif
-
-#if defined(MBEDTLS_ARC4_C)
-  if (ssl->conf->arc4_disabled == MBEDTLS_SSL_ARC4_DISABLED &&
-      suite_info->cipher == MBEDTLS_CIPHER_ARC4_128)
-    return (1);
-#endif
-
-#if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
-  if (suite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE &&
-      mbedtls_ecjpake_check(&ssl->handshake->ecjpake_ctx) != 0)
-    return (1);
-#endif
-
-  return (0);
-}
-
 static int ssl_write_client_hello(mbedtls_ssl_context *ssl) {
   int ret;
   size_t i, n, olen, ext_len = 0;
@@ -828,10 +689,6 @@
   unsigned char offer_compress;
   const int *ciphersuites;
   const mbedtls_ssl_ciphersuite_t *ciphersuite_info;
-#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) ||                     \
-    defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
-  int uses_ec = 0;
-#endif
 
   MBEDTLS_SSL_DEBUG_MSG(2, ("=> write client hello"));
 
@@ -965,27 +822,39 @@
   for (i = 0; ciphersuites[i] != 0; i++) {
     ciphersuite_info = mbedtls_ssl_ciphersuite_from_id(ciphersuites[i]);
 
-    if (ssl_validate_ciphersuite(ciphersuite_info, ssl,
-                                 ssl->conf->min_minor_ver,
-                                 ssl->conf->max_minor_ver) != 0)
+    if (ciphersuite_info == NULL)
       continue;
 
-    MBEDTLS_SSL_DEBUG_MSG(
-        3, ("client hello, add ciphersuite: %04x", ciphersuites[i]));
+    if (ciphersuite_info->min_minor_ver > ssl->conf->max_minor_ver ||
+        ciphersuite_info->max_minor_ver < ssl->conf->min_minor_ver)
+      continue;
 
-#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) ||                     \
-    defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
-    uses_ec |= mbedtls_ssl_ciphersuite_uses_ec(ciphersuite_info);
+#if defined(MBEDTLS_SSL_PROTO_DTLS)
+    if (ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM &&
+        (ciphersuite_info->flags & MBEDTLS_CIPHERSUITE_NODTLS))
+      continue;
 #endif
 
+#if defined(MBEDTLS_ARC4_C)
+    if (ssl->conf->arc4_disabled == MBEDTLS_SSL_ARC4_DISABLED &&
+        ciphersuite_info->cipher == MBEDTLS_CIPHER_ARC4_128)
+      continue;
+#endif
+
+#if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
+    if (ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE &&
+        mbedtls_ecjpake_check(&ssl->handshake->ecjpake_ctx) != 0)
+      continue;
+#endif
+
+    MBEDTLS_SSL_DEBUG_MSG(
+        3, ("client hello, add ciphersuite: %04x", ciphersuites[i]));
+
     n++;
     *p++ = (unsigned char)(ciphersuites[i] >> 8);
     *p++ = (unsigned char)(ciphersuites[i]);
   }
 
-  MBEDTLS_SSL_DEBUG_MSG(
-      3, ("client hello, got %d ciphersuites (excluding SCSVs)", n));
-
   /*
    * Add TLS_EMPTY_RENEGOTIATION_INFO_SCSV
    */
@@ -993,7 +862,6 @@
   if (ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE)
 #endif
   {
-    MBEDTLS_SSL_DEBUG_MSG(3, ("adding EMPTY_RENEGOTIATION_INFO_SCSV"));
     *p++ = (unsigned char)(MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO >> 8);
     *p++ = (unsigned char)(MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO);
     n++;
@@ -1012,6 +880,8 @@
   *q++ = (unsigned char)(n >> 7);
   *q++ = (unsigned char)(n << 1);
 
+  MBEDTLS_SSL_DEBUG_MSG(3, ("client hello, got %d ciphersuites", n));
+
 #if defined(MBEDTLS_ZLIB_SUPPORT)
   offer_compress = 1;
 #else
@@ -1019,7 +889,7 @@
 #endif
 
   /*
-   * We don't support compression with DTLS right now: if many records come
+   * We don't support compression with DTLS right now: is many records come
    * in the same datagram, uncompressing one could overwrite the next one.
    * We don't want to add complexity for handling that case unless there is
    * an actual need for it.
@@ -1069,22 +939,10 @@
 
 #if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) ||                     \
     defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
-  if (uses_ec) {
-    ssl_write_supported_elliptic_curves_ext(ssl, p + 2 + ext_len, &olen);
-    ext_len += olen;
-
-    ssl_write_supported_point_formats_ext(ssl, p + 2 + ext_len, &olen);
-    ext_len += olen;
-  }
-#endif
-
-#if defined(MBEDTLS_SSL_CLIENT_RPK)
-  ssl_write_client_certificate_type_ext(ssl, p + 2 + ext_len, &olen);
+  ssl_write_supported_elliptic_curves_ext(ssl, p + 2 + ext_len, &olen);
   ext_len += olen;
-#endif
 
-#if defined(MBEDTLS_SSL_SERVER_RPK)
-  ssl_write_server_certificate_type_ext(ssl, p + 2 + ext_len, &olen);
+  ssl_write_supported_point_formats_ext(ssl, p + 2 + ext_len, &olen);
   ext_len += olen;
 #endif
 
@@ -1293,13 +1151,13 @@
   size_t list_size;
   const unsigned char *p;
 
-  if (len == 0 || (size_t)(buf[0] + 1) != len) {
+  list_size = buf[0];
+  if (list_size + 1 != len) {
     MBEDTLS_SSL_DEBUG_MSG(1, ("bad server hello message"));
     mbedtls_ssl_send_alert_message(ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                    MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR);
     return (MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO);
   }
-  list_size = buf[0];
 
   p = buf + 1;
   while (list_size > 0) {
@@ -1415,88 +1273,6 @@
 }
 #endif /* MBEDTLS_SSL_ALPN */
 
-#if defined(MBEDTLS_SSL_CLIENT_RPK)
-static int ssl_parse_client_certificate_type_ext(mbedtls_ssl_context *ssl,
-                                                 const unsigned char *buf,
-                                                 size_t len) {
-  const unsigned char *p;
-
-  if (!ssl->conf->client_rpk) {
-    MBEDTLS_SSL_DEBUG_MSG(1, ("non-matching client RPK extension"));
-    mbedtls_ssl_send_alert_message(ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
-                                   MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE);
-    return (MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO);
-  }
-
-  if (len < 1) {
-    mbedtls_ssl_send_alert_message(ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
-                                   MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR);
-    return (MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO);
-  }
-
-  p = buf;
-
-  if (len == 1) {
-    if (p[0] == MBEDTLS_TLS_CERT_TYPE_RAW_PUBLIC_KEY) {
-      ssl->handshake->ecdh_ctx.client_raw_public_key = 1;
-      MBEDTLS_SSL_DEBUG_MSG(4, ("client certificate type: raw_public key"));
-      return (0);
-    }
-  } else {
-    if (p[0] == MBEDTLS_TLS_CERT_TYPE_RAW_PUBLIC_KEY ||
-        p[1] == MBEDTLS_TLS_CERT_TYPE_RAW_PUBLIC_KEY) {
-      ssl->handshake->ecdh_ctx.client_raw_public_key = 1;
-      MBEDTLS_SSL_DEBUG_MSG(4, ("client certificate type: raw_public key"));
-      return (0);
-    }
-  }
-
-  MBEDTLS_SSL_DEBUG_MSG(1, ("no supported certificate found"));
-  return (MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO);
-}
-#endif /* MBEDTLS_SSL_CLIENT_RPK */
-
-#if defined(MBEDTLS_SSL_SERVER_RPK)
-static int ssl_parse_server_certificate_type_ext(mbedtls_ssl_context *ssl,
-                                                 const unsigned char *buf,
-                                                 size_t len) {
-  const unsigned char *p;
-
-  if (!ssl->conf->server_rpk) {
-    MBEDTLS_SSL_DEBUG_MSG(1, ("non-matching server RPK extension"));
-    mbedtls_ssl_send_alert_message(ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
-                                   MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE);
-    return (MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO);
-  }
-
-  if (len < 1) {
-    mbedtls_ssl_send_alert_message(ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
-                                   MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR);
-    return (MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO);
-  }
-
-  p = buf;
-
-  if (len == 1) {
-    if (p[0] == MBEDTLS_TLS_CERT_TYPE_RAW_PUBLIC_KEY) {
-      ssl->handshake->ecdh_ctx.server_raw_public_key = 1;
-      MBEDTLS_SSL_DEBUG_MSG(4, ("server certificate type: raw_public key"));
-      return (0);
-    }
-  } else {
-    if (p[0] == MBEDTLS_TLS_CERT_TYPE_RAW_PUBLIC_KEY ||
-        p[1] == MBEDTLS_TLS_CERT_TYPE_RAW_PUBLIC_KEY) {
-      ssl->handshake->ecdh_ctx.server_raw_public_key = 1;
-      MBEDTLS_SSL_DEBUG_MSG(4, ("server certificate type: raw_public key"));
-      return (0);
-    }
-  }
-
-  MBEDTLS_SSL_DEBUG_MSG(1, ("no supported certificate found"));
-  return (MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO);
-}
-#endif /* MBEDTLS_SSL_SERVER_RPK */
-
 /*
  * Parse HelloVerifyRequest.  Only called after verifying the HS type.
  */
@@ -1797,9 +1573,23 @@
   MBEDTLS_SSL_DEBUG_MSG(3, ("server hello, chosen ciphersuite: %04x", i));
   MBEDTLS_SSL_DEBUG_MSG(3, ("server hello, compress alg.: %d", buf[37 + n]));
 
-  /*
-   * Perform cipher suite validation in same way as in ssl_write_client_hello.
-   */
+  suite_info =
+      mbedtls_ssl_ciphersuite_from_id(ssl->session_negotiate->ciphersuite);
+  if (suite_info == NULL
+#if defined(MBEDTLS_ARC4_C)
+      || (ssl->conf->arc4_disabled &&
+          suite_info->cipher == MBEDTLS_CIPHER_ARC4_128)
+#endif
+  ) {
+    MBEDTLS_SSL_DEBUG_MSG(1, ("bad server hello message"));
+    mbedtls_ssl_send_alert_message(ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
+                                   MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER);
+    return (MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO);
+  }
+
+  MBEDTLS_SSL_DEBUG_MSG(
+      3, ("server hello, chosen ciphersuite: %s", suite_info->name));
+
   i = 0;
   while (1) {
     if (ssl->conf->ciphersuite_list[ssl->minor_ver][i] == 0) {
@@ -1815,19 +1605,6 @@
     }
   }
 
-  suite_info =
-      mbedtls_ssl_ciphersuite_from_id(ssl->session_negotiate->ciphersuite);
-  if (ssl_validate_ciphersuite(suite_info, ssl, ssl->minor_ver,
-                               ssl->minor_ver) != 0) {
-    MBEDTLS_SSL_DEBUG_MSG(1, ("bad server hello message"));
-    mbedtls_ssl_send_alert_message(ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
-                                   MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER);
-    return (MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO);
-  }
-
-  MBEDTLS_SSL_DEBUG_MSG(
-      3, ("server hello, chosen ciphersuite: %s", suite_info->name));
-
   if (comp != MBEDTLS_SSL_COMPRESS_NULL
 #if defined(MBEDTLS_ZLIB_SUPPORT)
       && comp != MBEDTLS_SSL_COMPRESS_DEFLATE
@@ -1959,28 +1736,6 @@
       break;
 #endif /* MBEDTLS_SSL_ALPN */
 
-#if defined(MBEDTLS_SSL_CLIENT_RPK)
-    case MBEDTLS_TLS_EXT_CLIENT_CERTIFICATE_TYPE:
-      MBEDTLS_SSL_DEBUG_MSG(3, ("found client certificate type extension"));
-
-      if ((ret = ssl_parse_client_certificate_type_ext(ssl, ext + 4,
-                                                       ext_size)) != 0)
-        return (ret);
-
-      break;
-#endif /* MBEDTLS_SSL_CLIENT_RPK */
-
-#if defined(MBEDTLS_SSL_SERVER_RPK)
-    case MBEDTLS_TLS_EXT_SERVER_CERTIFICATE_TYPE:
-      MBEDTLS_SSL_DEBUG_MSG(3, ("found server certificate type extension"));
-
-      if ((ret = ssl_parse_server_certificate_type_ext(ssl, ext + 4,
-                                                       ext_size)) != 0)
-        return (ret);
-
-      break;
-#endif /* MBEDTLS_SSL_SERVER_RPK */
-
     default:
       MBEDTLS_SSL_DEBUG_MSG(3,
                             ("unknown extension found: %d (ignoring)", ext_id));
@@ -2075,8 +1830,7 @@
     defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED) ||                       \
     defined(MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED) ||                         \
     defined(MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED) ||                          \
-    defined(MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED) ||                        \
-    defined(MBEDTLS_KEY_EXCHANGE_ECDH_ANON_ENABLED)
+    defined(MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED)
 static int ssl_check_server_ecdh_params(const mbedtls_ssl_context *ssl) {
   const mbedtls_ecp_curve_info *curve_info;
 
@@ -2105,13 +1859,11 @@
           MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED ||                          \
           MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED ||                            \
           MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED ||                             \
-          MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED ||                           \
-          MBEDTLS_KEY_EXCHANGE_ECDH_ANON_ENABLED */
+          MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED */
 
 #if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED) ||                         \
     defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED) ||                       \
-    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED) ||                         \
-    defined(MBEDTLS_KEY_EXCHANGE_ECDH_ANON_ENABLED)
+    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED)
 static int ssl_parse_server_ecdh_params(mbedtls_ssl_context *ssl,
                                         unsigned char **p, unsigned char *end) {
   int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
@@ -2139,71 +1891,9 @@
 }
 #endif /* MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED ||                            \
           MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED ||                          \
-          MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED ||                            \
-          MBEDTLS_KEY_EXCHANGE_ECDH_ANON_ENABLED */
+          MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED */
 
 #if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)
-#if defined(MBEDTLS_OCF_PATCH)
-static int ssl_parse_server_psk_hint(mbedtls_ssl_context *ssl,
-                                     unsigned char **p, unsigned char *end) {
-  int ret = 0;
-  size_t n;
-
-  if (ssl->conf->f_psk == NULL &&
-      (ssl->conf->psk == NULL || ssl->conf->psk_identity == NULL ||
-       ssl->conf->psk_identity_len == 0 || ssl->conf->psk_len == 0)) {
-    MBEDTLS_SSL_DEBUG_MSG(1, ("got no pre-shared key"));
-    return (MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED);
-  }
-
-  /*
-   * Receive client pre-shared key identity name
-   */
-  if (*p + 2 > end) {
-    MBEDTLS_SSL_DEBUG_MSG(1, ("bad server key exchange message"));
-    return (MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE);
-  }
-
-  n = ((*p)[0] << 8) | (*p)[1];
-  *p += 2;
-
-  if (n == 0) {
-    return (0);
-  }
-
-  if (n < 1 || n > 65535 || *p + n > end) {
-    MBEDTLS_SSL_DEBUG_MSG(1, ("bad server key exchange message"));
-    return (MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE);
-  }
-
-  if (ssl->conf->f_psk != NULL) {
-    if (ssl->conf->f_psk(ssl->conf->p_psk, ssl, *p, n) != 0)
-      ret = MBEDTLS_ERR_SSL_UNKNOWN_IDENTITY;
-  } else {
-    /* Identity is not a big secret since clients send it in the clear,
-     * but treat it carefully anyway, just in case */
-    if (n != ssl->conf->psk_identity_len ||
-        mbedtls_ssl_safer_memcmp(ssl->conf->psk_identity, *p, n) != 0) {
-      ret = MBEDTLS_ERR_SSL_UNKNOWN_IDENTITY;
-    }
-  }
-
-  if (ret == MBEDTLS_ERR_SSL_UNKNOWN_IDENTITY) {
-    MBEDTLS_SSL_DEBUG_BUF(3, "Unknown PSK identity", *p, n);
-    if ((ret = mbedtls_ssl_send_alert_message(
-             ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
-             MBEDTLS_SSL_ALERT_MSG_UNKNOWN_PSK_IDENTITY)) != 0) {
-      return (ret);
-    }
-
-    return (MBEDTLS_ERR_SSL_UNKNOWN_IDENTITY);
-  }
-
-  *p += n;
-
-  return (0);
-}
-#else
 static int ssl_parse_server_psk_hint(mbedtls_ssl_context *ssl,
                                      unsigned char **p, unsigned char *end) {
   int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
@@ -2215,15 +1905,10 @@
    *
    * opaque psk_identity_hint<0..2^16-1>;
    */
-  if (end - (*p) < 2) {
-    MBEDTLS_SSL_DEBUG_MSG(1, ("bad server key exchange message "
-                              "(psk_identity_hint length)"));
-    return (MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE);
-  }
   len = (*p)[0] << 8 | (*p)[1];
   *p += 2;
 
-  if (end - (*p) < (int)len) {
+  if ((*p) + len > end) {
     MBEDTLS_SSL_DEBUG_MSG(1, ("bad server key exchange message "
                               "(psk_identity_hint length)"));
     return (MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE);
@@ -2239,7 +1924,6 @@
 
   return (ret);
 }
-#endif /* MBEDTLS_OCF_PATCH */
 #endif /* MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED */
 
 #if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED) ||                               \
@@ -2519,12 +2203,10 @@
           MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED */
 #if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED) ||                         \
     defined(MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED) ||                         \
-    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED) ||                       \
-    defined(MBEDTLS_KEY_EXCHANGE_ECDH_ANON_ENABLED)
+    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED)
       if (ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_RSA ||
           ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
-          ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA ||
-          ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDH_ANON) {
+          ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA) {
     if (ssl_parse_server_ecdh_params(ssl, &p, end) != 0) {
       MBEDTLS_SSL_DEBUG_MSG(1, ("bad server key exchange message"));
       mbedtls_ssl_send_alert_message(ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
@@ -2534,8 +2216,7 @@
   } else
 #endif /* MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED ||                            \
           MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED ||                            \
-          MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED ||                          \
-          MBEDTLS_KEY_EXCHANGE_ECDH_ANON_ENABLED */
+          MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED */
 #if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
       if (ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE) {
     ret = mbedtls_ecjpake_read_round_two(&ssl->handshake->ecjpake_ctx, p,
@@ -2597,15 +2278,10 @@
       return (MBEDTLS_ERR_SSL_INTERNAL_ERROR);
     }
 
-// Anonymous cipher suite without sign, ecdh param only
-#if defined(MBEDTLS_KEY_EXCHANGE_ECDH_ANON_ENABLED)
-    if (ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDH_ANON) {
-      goto exit;
-    }
-#endif
     /*
      * Read signature
      */
+
     if (p > end - 2) {
       MBEDTLS_SSL_DEBUG_MSG(1, ("bad server key exchange message"));
       mbedtls_ssl_send_alert_message(ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
@@ -2780,26 +2456,10 @@
   buf = ssl->in_msg;
 
   /* certificate_types */
-  if (ssl->in_hslen <= mbedtls_ssl_hs_hdr_len(ssl)) {
-    MBEDTLS_SSL_DEBUG_MSG(1, ("bad certificate request message"));
-    mbedtls_ssl_send_alert_message(ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
-                                   MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR);
-    return (MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST);
-  }
   cert_type_len = buf[mbedtls_ssl_hs_hdr_len(ssl)];
   n = cert_type_len;
 
-  /*
-   * In the subsequent code there are two paths that read from buf:
-   *     * the length of the signature algorithms field (if minor version of
-   *       SSL is 3),
-   *     * distinguished name length otherwise.
-   * Both reach at most the index:
-   *    ...hdr_len + 2 + n,
-   * therefore the buffer length at this point must be greater than that
-   * regardless of the actual code path.
-   */
-  if (ssl->in_hslen <= mbedtls_ssl_hs_hdr_len(ssl) + 2 + n) {
+  if (ssl->in_hslen < mbedtls_ssl_hs_hdr_len(ssl) + 2 + n) {
     MBEDTLS_SSL_DEBUG_MSG(1, ("bad certificate request message"));
     mbedtls_ssl_send_alert_message(ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                    MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR);
@@ -2812,31 +2472,9 @@
     size_t sig_alg_len = ((buf[mbedtls_ssl_hs_hdr_len(ssl) + 1 + n] << 8) |
                           (buf[mbedtls_ssl_hs_hdr_len(ssl) + 2 + n]));
 #if defined(MBEDTLS_DEBUG_C)
-    unsigned char *sig_alg;
+    unsigned char *sig_alg = buf + mbedtls_ssl_hs_hdr_len(ssl) + 3 + n;
     size_t i;
-#endif
-
-    /*
-     * The furthest access in buf is in the loop few lines below:
-     *     sig_alg[i + 1],
-     * where:
-     *     sig_alg = buf + ...hdr_len + 3 + n,
-     *     max(i) = sig_alg_len - 1.
-     * Therefore the furthest access is:
-     *     buf[...hdr_len + 3 + n + sig_alg_len - 1 + 1],
-     * which reduces to:
-     *     buf[...hdr_len + 3 + n + sig_alg_len],
-     * which is one less than we need the buf to be.
-     */
-    if (ssl->in_hslen <= mbedtls_ssl_hs_hdr_len(ssl) + 3 + n + sig_alg_len) {
-      MBEDTLS_SSL_DEBUG_MSG(1, ("bad certificate request message"));
-      mbedtls_ssl_send_alert_message(ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
-                                     MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR);
-      return (MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST);
-    }
 
-#if defined(MBEDTLS_DEBUG_C)
-    sig_alg = buf + mbedtls_ssl_hs_hdr_len(ssl) + 3 + n;
     for (i = 0; i < sig_alg_len; i += 2) {
       MBEDTLS_SSL_DEBUG_MSG(3, ("Supported Signature Algorithm found: %d"
                                 ",%d",
@@ -2845,6 +2483,13 @@
 #endif
 
     n += 2 + sig_alg_len;
+
+    if (ssl->in_hslen < mbedtls_ssl_hs_hdr_len(ssl) + 2 + n) {
+      MBEDTLS_SSL_DEBUG_MSG(1, ("bad certificate request message"));
+      mbedtls_ssl_send_alert_message(ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
+                                     MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR);
+      return (MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST);
+    }
   }
 #endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
 
@@ -2930,9 +2575,7 @@
       return (ret);
     }
 
-#if !defined(MBEDTLS_DHM_ALT)
     MBEDTLS_SSL_DEBUG_MPI(3, "DHM: X ", &ssl->handshake->dhm_ctx.X);
-#endif
     MBEDTLS_SSL_DEBUG_MPI(3, "DHM: GX", &ssl->handshake->dhm_ctx.GX);
 
     if ((ret = mbedtls_dhm_calc_secret(
@@ -2949,13 +2592,11 @@
 #if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED) ||                         \
     defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED) ||                       \
     defined(MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED) ||                          \
-    defined(MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED) ||                        \
-    defined(MBEDTLS_KEY_EXCHANGE_ECDH_ANON_ENABLED)
+    defined(MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED)
       if (ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_RSA ||
           ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA ||
           ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDH_RSA ||
-          ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA ||
-          ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDH_ANON) {
+          ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA) {
     /*
      * ECDH key exchange -- send client public value
      */
@@ -2984,8 +2625,7 @@
 #endif /* MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED ||                            \
           MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED ||                          \
           MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED ||                             \
-          MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED ||                           \
-          MBEDTLS_KEY_EXCHANGE_ECDH_ANON_ENABLED */
+          MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED */
 #if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)
       if (mbedtls_ssl_ciphersuite_uses_psk(ciphersuite_info)) {
     /*
@@ -3150,8 +2790,7 @@
       ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK ||
       ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
       ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
-      ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE ||
-      ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDH_ANON) {
+      ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE) {
     MBEDTLS_SSL_DEBUG_MSG(2, ("<= skip write certificate verify"));
     ssl->state++;
     return (0);
@@ -3182,8 +2821,7 @@
       ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK ||
       ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
       ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
-      ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE ||
-      ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDH_ANON) {
+      ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE) {
     MBEDTLS_SSL_DEBUG_MSG(2, ("<= skip write certificate verify"));
     ssl->state++;
     return (0);
@@ -3344,8 +2982,7 @@
 
   msg = ssl->in_msg + mbedtls_ssl_hs_hdr_len(ssl);
 
-  lifetime =
-      (((uint32_t)msg[0]) << 24) | (msg[1] << 16) | (msg[2] << 8) | (msg[3]);
+  lifetime = (msg[0] << 24) | (msg[1] << 16) | (msg[2] << 8) | (msg[3]);
 
   ticket_len = (msg[4] << 8) | (msg[5]);
 
