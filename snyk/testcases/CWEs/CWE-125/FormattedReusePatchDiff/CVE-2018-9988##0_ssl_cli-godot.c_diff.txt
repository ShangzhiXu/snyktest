--- /home/V1SCAN/CWE-125/FormattedUsed/ssl_cli-godot.c	2023-12-10 02:51:50.748371956 +0900
+++ /home/V1SCAN/CWE-125/FormattedPatch/NEW##CVE-2018-9988##0##ARMmbed@@mbedtls##ssl_cli.c	2023-12-10 02:51:51.818363571 +0900
@@ -48,14 +48,19 @@
 #endif
 
 #if defined(MBEDTLS_SSL_SESSION_TICKETS)
-#include "mbedtls/platform_util.h"
+/* Implementation that should never be optimized out by the compiler */
+static void mbedtls_zeroize(void *v, size_t n) {
+  volatile unsigned char *p = v;
+  while (n--)
+    *p++ = 0;
+}
 #endif
 
 #if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
 static void ssl_write_hostname_ext(mbedtls_ssl_context *ssl, unsigned char *buf,
                                    size_t *olen) {
   unsigned char *p = buf;
-  const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
+  const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
   size_t hostname_len;
 
   *olen = 0;
@@ -122,7 +127,7 @@
 static void ssl_write_renegotiation_ext(mbedtls_ssl_context *ssl,
                                         unsigned char *buf, size_t *olen) {
   unsigned char *p = buf;
-  const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
+  const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 
   *olen = 0;
 
@@ -164,7 +169,7 @@
                                                unsigned char *buf,
                                                size_t *olen) {
   unsigned char *p = buf;
-  const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
+  const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
   size_t sig_alg_len = 0;
   const int *md;
 #if defined(MBEDTLS_RSA_C) || defined(MBEDTLS_ECDSA_C)
@@ -246,7 +251,7 @@
                                                     unsigned char *buf,
                                                     size_t *olen) {
   unsigned char *p = buf;
-  const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
+  const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
   unsigned char *elliptic_curve_list = p + 6;
   size_t elliptic_curve_len = 0;
   const mbedtls_ecp_curve_info *info;
@@ -320,7 +325,7 @@
                                                   unsigned char *buf,
                                                   size_t *olen) {
   unsigned char *p = buf;
-  const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
+  const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 
   *olen = 0;
 
@@ -351,7 +356,7 @@
                                        unsigned char *buf, size_t *olen) {
   int ret;
   unsigned char *p = buf;
-  const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
+  const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
   size_t kkpp_len;
 
   *olen = 0;
@@ -420,7 +425,7 @@
                                               unsigned char *buf,
                                               size_t *olen) {
   unsigned char *p = buf;
-  const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
+  const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 
   *olen = 0;
 
@@ -452,7 +457,7 @@
 static void ssl_write_truncated_hmac_ext(mbedtls_ssl_context *ssl,
                                          unsigned char *buf, size_t *olen) {
   unsigned char *p = buf;
-  const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
+  const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 
   *olen = 0;
 
@@ -481,7 +486,7 @@
 static void ssl_write_encrypt_then_mac_ext(mbedtls_ssl_context *ssl,
                                            unsigned char *buf, size_t *olen) {
   unsigned char *p = buf;
-  const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
+  const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 
   *olen = 0;
 
@@ -512,7 +517,7 @@
 static void ssl_write_extended_ms_ext(mbedtls_ssl_context *ssl,
                                       unsigned char *buf, size_t *olen) {
   unsigned char *p = buf;
-  const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
+  const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 
   *olen = 0;
 
@@ -543,7 +548,7 @@
 static void ssl_write_session_ticket_ext(mbedtls_ssl_context *ssl,
                                          unsigned char *buf, size_t *olen) {
   unsigned char *p = buf;
-  const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
+  const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
   size_t tlen = ssl->session_negotiate->ticket_len;
 
   *olen = 0;
@@ -583,7 +588,7 @@
 static void ssl_write_alpn_ext(mbedtls_ssl_context *ssl, unsigned char *buf,
                                size_t *olen) {
   unsigned char *p = buf;
-  const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
+  const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
   size_t alpnlen = 0;
   const char **cur;
 
@@ -676,48 +681,6 @@
   return (0);
 }
 
-/**
- * \brief           Validate cipher suite against config in SSL context.
- *
- * \param suite_info    cipher suite to validate
- * \param ssl           SSL context
- * \param min_minor_ver Minimal minor version to accept a cipher suite
- * \param max_minor_ver Maximal minor version to accept a cipher suite
- *
- * \return          0 if valid, else 1
- */
-static int ssl_validate_ciphersuite(const mbedtls_ssl_ciphersuite_t *suite_info,
-                                    const mbedtls_ssl_context *ssl,
-                                    int min_minor_ver, int max_minor_ver) {
-  (void)ssl;
-  if (suite_info == NULL)
-    return (1);
-
-  if (suite_info->min_minor_ver > max_minor_ver ||
-      suite_info->max_minor_ver < min_minor_ver)
-    return (1);
-
-#if defined(MBEDTLS_SSL_PROTO_DTLS)
-  if (ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM &&
-      (suite_info->flags & MBEDTLS_CIPHERSUITE_NODTLS))
-    return (1);
-#endif
-
-#if defined(MBEDTLS_ARC4_C)
-  if (ssl->conf->arc4_disabled == MBEDTLS_SSL_ARC4_DISABLED &&
-      suite_info->cipher == MBEDTLS_CIPHER_ARC4_128)
-    return (1);
-#endif
-
-#if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
-  if (suite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE &&
-      mbedtls_ecjpake_check(&ssl->handshake->ecjpake_ctx) != 0)
-    return (1);
-#endif
-
-  return (0);
-}
-
 static int ssl_write_client_hello(mbedtls_ssl_context *ssl) {
   int ret;
   size_t i, n, olen, ext_len = 0;
@@ -726,10 +689,6 @@
   unsigned char offer_compress;
   const int *ciphersuites;
   const mbedtls_ssl_ciphersuite_t *ciphersuite_info;
-#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) ||                     \
-    defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
-  int uses_ec = 0;
-#endif
 
   MBEDTLS_SSL_DEBUG_MSG(2, ("=> write client hello"));
 
@@ -863,27 +822,39 @@
   for (i = 0; ciphersuites[i] != 0; i++) {
     ciphersuite_info = mbedtls_ssl_ciphersuite_from_id(ciphersuites[i]);
 
-    if (ssl_validate_ciphersuite(ciphersuite_info, ssl,
-                                 ssl->conf->min_minor_ver,
-                                 ssl->conf->max_minor_ver) != 0)
+    if (ciphersuite_info == NULL)
       continue;
 
-    MBEDTLS_SSL_DEBUG_MSG(
-        3, ("client hello, add ciphersuite: %04x", ciphersuites[i]));
+    if (ciphersuite_info->min_minor_ver > ssl->conf->max_minor_ver ||
+        ciphersuite_info->max_minor_ver < ssl->conf->min_minor_ver)
+      continue;
 
-#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) ||                     \
-    defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
-    uses_ec |= mbedtls_ssl_ciphersuite_uses_ec(ciphersuite_info);
+#if defined(MBEDTLS_SSL_PROTO_DTLS)
+    if (ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM &&
+        (ciphersuite_info->flags & MBEDTLS_CIPHERSUITE_NODTLS))
+      continue;
 #endif
 
+#if defined(MBEDTLS_ARC4_C)
+    if (ssl->conf->arc4_disabled == MBEDTLS_SSL_ARC4_DISABLED &&
+        ciphersuite_info->cipher == MBEDTLS_CIPHER_ARC4_128)
+      continue;
+#endif
+
+#if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
+    if (ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE &&
+        mbedtls_ecjpake_check(&ssl->handshake->ecjpake_ctx) != 0)
+      continue;
+#endif
+
+    MBEDTLS_SSL_DEBUG_MSG(
+        3, ("client hello, add ciphersuite: %04x", ciphersuites[i]));
+
     n++;
     *p++ = (unsigned char)(ciphersuites[i] >> 8);
     *p++ = (unsigned char)(ciphersuites[i]);
   }
 
-  MBEDTLS_SSL_DEBUG_MSG(
-      3, ("client hello, got %d ciphersuites (excluding SCSVs)", n));
-
   /*
    * Add TLS_EMPTY_RENEGOTIATION_INFO_SCSV
    */
@@ -891,7 +862,6 @@
   if (ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE)
 #endif
   {
-    MBEDTLS_SSL_DEBUG_MSG(3, ("adding EMPTY_RENEGOTIATION_INFO_SCSV"));
     *p++ = (unsigned char)(MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO >> 8);
     *p++ = (unsigned char)(MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO);
     n++;
@@ -910,6 +880,8 @@
   *q++ = (unsigned char)(n >> 7);
   *q++ = (unsigned char)(n << 1);
 
+  MBEDTLS_SSL_DEBUG_MSG(3, ("client hello, got %d ciphersuites", n));
+
 #if defined(MBEDTLS_ZLIB_SUPPORT)
   offer_compress = 1;
 #else
@@ -917,7 +889,7 @@
 #endif
 
   /*
-   * We don't support compression with DTLS right now: if many records come
+   * We don't support compression with DTLS right now: is many records come
    * in the same datagram, uncompressing one could overwrite the next one.
    * We don't want to add complexity for handling that case unless there is
    * an actual need for it.
@@ -967,13 +939,11 @@
 
 #if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) ||                     \
     defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
-  if (uses_ec) {
-    ssl_write_supported_elliptic_curves_ext(ssl, p + 2 + ext_len, &olen);
-    ext_len += olen;
+  ssl_write_supported_elliptic_curves_ext(ssl, p + 2 + ext_len, &olen);
+  ext_len += olen;
 
-    ssl_write_supported_point_formats_ext(ssl, p + 2 + ext_len, &olen);
-    ext_len += olen;
-  }
+  ssl_write_supported_point_formats_ext(ssl, p + 2 + ext_len, &olen);
+  ext_len += olen;
 #endif
 
 #if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
@@ -1034,19 +1004,11 @@
     mbedtls_ssl_send_flight_completed(ssl);
 #endif
 
-  if ((ret = mbedtls_ssl_write_handshake_msg(ssl)) != 0) {
-    MBEDTLS_SSL_DEBUG_RET(1, "mbedtls_ssl_write_handshake_msg", ret);
+  if ((ret = mbedtls_ssl_write_record(ssl)) != 0) {
+    MBEDTLS_SSL_DEBUG_RET(1, "mbedtls_ssl_write_record", ret);
     return (ret);
   }
 
-#if defined(MBEDTLS_SSL_PROTO_DTLS)
-  if (ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM &&
-      (ret = mbedtls_ssl_flight_transmit(ssl)) != 0) {
-    MBEDTLS_SSL_DEBUG_RET(1, "mbedtls_ssl_flight_transmit", ret);
-    return (ret);
-  }
-#endif /* MBEDTLS_SSL_PROTO_DTLS */
-
   MBEDTLS_SSL_DEBUG_MSG(2, ("<= write client hello"));
 
   return (0);
@@ -1189,13 +1151,13 @@
   size_t list_size;
   const unsigned char *p;
 
-  if (len == 0 || (size_t)(buf[0] + 1) != len) {
+  list_size = buf[0];
+  if (list_size + 1 != len) {
     MBEDTLS_SSL_DEBUG_MSG(1, ("bad server hello message"));
     mbedtls_ssl_send_alert_message(ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                    MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR);
     return (MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO);
   }
-  list_size = buf[0];
 
   p = buf + 1;
   while (list_size > 0) {
@@ -1322,18 +1284,6 @@
 
   MBEDTLS_SSL_DEBUG_MSG(2, ("=> parse hello verify request"));
 
-  /* Check that there is enough room for:
-   * - 2 bytes of version
-   * - 1 byte of cookie_len
-   */
-  if (mbedtls_ssl_hs_hdr_len(ssl) + 3 > ssl->in_msglen) {
-    MBEDTLS_SSL_DEBUG_MSG(1,
-                          ("incoming HelloVerifyRequest message is too short"));
-    mbedtls_ssl_send_alert_message(ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
-                                   MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR);
-    return (MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO);
-  }
-
   /*
    * struct {
    *   ProtocolVersion server_version;
@@ -1361,6 +1311,8 @@
   }
 
   cookie_len = *p++;
+  MBEDTLS_SSL_DEBUG_BUF(3, "cookie", p, cookie_len);
+
   if ((ssl->in_msg + ssl->in_msglen) - p < cookie_len) {
     MBEDTLS_SSL_DEBUG_MSG(
         1, ("cookie length does not match incoming message size"));
@@ -1368,7 +1320,6 @@
                                    MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR);
     return (MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO);
   }
-  MBEDTLS_SSL_DEBUG_BUF(3, "cookie", p, cookie_len);
 
   mbedtls_free(ssl->handshake->verify_cookie);
 
@@ -1412,7 +1363,7 @@
 
   buf = ssl->in_msg;
 
-  if ((ret = mbedtls_ssl_read_record(ssl, 1)) != 0) {
+  if ((ret = mbedtls_ssl_read_record(ssl)) != 0) {
     /* No alert on a read error. */
     MBEDTLS_SSL_DEBUG_RET(1, "mbedtls_ssl_read_record", ret);
     return (ret);
@@ -1622,9 +1573,23 @@
   MBEDTLS_SSL_DEBUG_MSG(3, ("server hello, chosen ciphersuite: %04x", i));
   MBEDTLS_SSL_DEBUG_MSG(3, ("server hello, compress alg.: %d", buf[37 + n]));
 
-  /*
-   * Perform cipher suite validation in same way as in ssl_write_client_hello.
-   */
+  suite_info =
+      mbedtls_ssl_ciphersuite_from_id(ssl->session_negotiate->ciphersuite);
+  if (suite_info == NULL
+#if defined(MBEDTLS_ARC4_C)
+      || (ssl->conf->arc4_disabled &&
+          suite_info->cipher == MBEDTLS_CIPHER_ARC4_128)
+#endif
+  ) {
+    MBEDTLS_SSL_DEBUG_MSG(1, ("bad server hello message"));
+    mbedtls_ssl_send_alert_message(ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
+                                   MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER);
+    return (MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO);
+  }
+
+  MBEDTLS_SSL_DEBUG_MSG(
+      3, ("server hello, chosen ciphersuite: %s", suite_info->name));
+
   i = 0;
   while (1) {
     if (ssl->conf->ciphersuite_list[ssl->minor_ver][i] == 0) {
@@ -1640,26 +1605,6 @@
     }
   }
 
-  suite_info =
-      mbedtls_ssl_ciphersuite_from_id(ssl->session_negotiate->ciphersuite);
-  if (ssl_validate_ciphersuite(suite_info, ssl, ssl->minor_ver,
-                               ssl->minor_ver) != 0) {
-    MBEDTLS_SSL_DEBUG_MSG(1, ("bad server hello message"));
-    mbedtls_ssl_send_alert_message(ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
-                                   MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER);
-    return (MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO);
-  }
-
-  MBEDTLS_SSL_DEBUG_MSG(
-      3, ("server hello, chosen ciphersuite: %s", suite_info->name));
-
-#if defined(MBEDTLS_SSL__ECP_RESTARTABLE)
-  if (suite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA &&
-      ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3) {
-    ssl->handshake->ecrs_enabled = 1;
-  }
-#endif
-
   if (comp != MBEDTLS_SSL_COMPRESS_NULL
 #if defined(MBEDTLS_ZLIB_SUPPORT)
       && comp != MBEDTLS_SSL_COMPRESS_DEFLATE
@@ -1888,14 +1833,9 @@
     defined(MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED)
 static int ssl_check_server_ecdh_params(const mbedtls_ssl_context *ssl) {
   const mbedtls_ecp_curve_info *curve_info;
-  mbedtls_ecp_group_id grp_id;
-#if defined(MBEDTLS_ECDH_LEGACY_CONTEXT)
-  grp_id = ssl->handshake->ecdh_ctx.grp.id;
-#else
-  grp_id = ssl->handshake->ecdh_ctx.grp_id;
-#endif
 
-  curve_info = mbedtls_ecp_curve_info_from_grp_id(grp_id);
+  curve_info =
+      mbedtls_ecp_curve_info_from_grp_id(ssl->handshake->ecdh_ctx.grp.id);
   if (curve_info == NULL) {
     MBEDTLS_SSL_DEBUG_MSG(1, ("should never happen"));
     return (MBEDTLS_ERR_SSL_INTERNAL_ERROR);
@@ -1904,14 +1844,14 @@
   MBEDTLS_SSL_DEBUG_MSG(2, ("ECDH curve: %s", curve_info->name));
 
 #if defined(MBEDTLS_ECP_C)
-  if (mbedtls_ssl_check_curve(ssl, grp_id) != 0)
+  if (mbedtls_ssl_check_curve(ssl, ssl->handshake->ecdh_ctx.grp.id) != 0)
 #else
   if (ssl->handshake->ecdh_ctx.grp.nbits < 163 ||
       ssl->handshake->ecdh_ctx.grp.nbits > 521)
 #endif
     return (-1);
 
-  MBEDTLS_SSL_DEBUG_ECDH(3, &ssl->handshake->ecdh_ctx, MBEDTLS_DEBUG_ECDH_QP);
+  MBEDTLS_SSL_DEBUG_ECP(3, "ECDH: Qp", &ssl->handshake->ecdh_ctx.Qp);
 
   return (0);
 }
@@ -1939,10 +1879,6 @@
   if ((ret = mbedtls_ecdh_read_params(&ssl->handshake->ecdh_ctx,
                                       (const unsigned char **)p, end)) != 0) {
     MBEDTLS_SSL_DEBUG_RET(1, ("mbedtls_ecdh_read_params"), ret);
-#if defined(MBEDTLS_SSL__ECP_RESTARTABLE)
-    if (ret == MBEDTLS_ERR_ECP_IN_PROGRESS)
-      ret = MBEDTLS_ERR_SSL_CRYPTO_IN_PROGRESS;
-#endif
     return (ret);
   }
 
@@ -1969,15 +1905,10 @@
    *
    * opaque psk_identity_hint<0..2^16-1>;
    */
-  if (end - (*p) < 2) {
-    MBEDTLS_SSL_DEBUG_MSG(1, ("bad server key exchange message "
-                              "(psk_identity_hint length)"));
-    return (MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE);
-  }
   len = (*p)[0] << 8 | (*p)[1];
   *p += 2;
 
-  if (end - (*p) < (int)len) {
+  if ((*p) + len > end) {
     MBEDTLS_SSL_DEBUG_MSG(1, ("bad server key exchange message "
                               "(psk_identity_hint length)"));
     return (MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE);
@@ -2006,7 +1937,7 @@
   size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
   unsigned char *p = ssl->handshake->premaster + pms_offset;
 
-  if (offset + len_bytes > MBEDTLS_SSL_OUT_CONTENT_LEN) {
+  if (offset + len_bytes > MBEDTLS_SSL_MAX_CONTENT_LEN) {
     MBEDTLS_SSL_DEBUG_MSG(1, ("buffer too small for encrypted pms"));
     return (MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL);
   }
@@ -2045,7 +1976,7 @@
   if ((ret = mbedtls_pk_encrypt(
            &ssl->session_negotiate->peer_cert->pk, p, ssl->handshake->pmslen,
            ssl->out_msg + offset + len_bytes, olen,
-           MBEDTLS_SSL_OUT_CONTENT_LEN - offset - len_bytes, ssl->conf->f_rng,
+           MBEDTLS_SSL_MAX_CONTENT_LEN - offset - len_bytes, ssl->conf->f_rng,
            ssl->conf->p_rng)) != 0) {
     MBEDTLS_SSL_DEBUG_RET(1, "mbedtls_rsa_pkcs1_encrypt", ret);
     return (ret);
@@ -2198,14 +2129,7 @@
 #endif /* MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED ||                             \
           MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED */
 
-#if defined(MBEDTLS_SSL__ECP_RESTARTABLE)
-  if (ssl->handshake->ecrs_enabled &&
-      ssl->handshake->ecrs_state == ssl_ecrs_ske_start_processing) {
-    goto start_processing;
-  }
-#endif
-
-  if ((ret = mbedtls_ssl_read_record(ssl, 1)) != 0) {
+  if ((ret = mbedtls_ssl_read_record(ssl)) != 0) {
     MBEDTLS_SSL_DEBUG_RET(1, "mbedtls_ssl_read_record", ret);
     return (ret);
   }
@@ -2238,12 +2162,6 @@
     return (MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE);
   }
 
-#if defined(MBEDTLS_SSL__ECP_RESTARTABLE)
-  if (ssl->handshake->ecrs_enabled)
-    ssl->handshake->ecrs_state = ssl_ecrs_ske_start_processing;
-
-start_processing:
-#endif
   p = ssl->in_msg + mbedtls_ssl_hs_hdr_len(ssl);
   end = ssl->in_msg + ssl->in_hslen;
   MBEDTLS_SSL_DEBUG_BUF(3, "server key exchange", p, end - p);
@@ -2324,7 +2242,6 @@
     mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
     unsigned char *params = ssl->in_msg + mbedtls_ssl_hs_hdr_len(ssl);
     size_t params_len = p - params;
-    void *rs_ctx = NULL;
 
     /*
      * Handle the digitally-signed structure
@@ -2374,7 +2291,7 @@
     sig_len = (p[0] << 8) | p[1];
     p += 2;
 
-    if (p != end - sig_len) {
+    if (end != p + sig_len) {
       MBEDTLS_SSL_DEBUG_MSG(1, ("bad server key exchange message"));
       mbedtls_ssl_send_alert_message(ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                      MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR);
@@ -2400,7 +2317,9 @@
 #if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) ||    \
     defined(MBEDTLS_SSL_PROTO_TLS1_2)
         if (md_alg != MBEDTLS_MD_NONE) {
-      ret = mbedtls_ssl_get_key_exchange_md_tls1_2(ssl, hash, &hashlen, params,
+      /* Info from md_alg will be used instead */
+      hashlen = 0;
+      ret = mbedtls_ssl_get_key_exchange_md_tls1_2(ssl, hash, params,
                                                    params_len, md_alg);
       if (ret != 0)
         return (ret);
@@ -2412,7 +2331,11 @@
       return (MBEDTLS_ERR_SSL_INTERNAL_ERROR);
     }
 
-    MBEDTLS_SSL_DEBUG_BUF(3, "parameters hash", hash, hashlen);
+    MBEDTLS_SSL_DEBUG_BUF(3, "parameters hash", hash,
+                          hashlen != 0
+                              ? hashlen
+                              : (unsigned int)(mbedtls_md_get_size(
+                                    mbedtls_md_info_from_type(md_alg))));
 
     if (ssl->session_negotiate->peer_cert == NULL) {
       MBEDTLS_SSL_DEBUG_MSG(2, ("certificate required"));
@@ -2431,24 +2354,11 @@
       return (MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH);
     }
 
-#if defined(MBEDTLS_SSL__ECP_RESTARTABLE)
-    if (ssl->handshake->ecrs_enabled)
-      rs_ctx = &ssl->handshake->ecrs_ctx.pk;
-#endif
-
-    if ((ret = mbedtls_pk_verify_restartable(
-             &ssl->session_negotiate->peer_cert->pk, md_alg, hash, hashlen, p,
-             sig_len, rs_ctx)) != 0) {
-#if defined(MBEDTLS_SSL__ECP_RESTARTABLE)
-      if (ret != MBEDTLS_ERR_ECP_IN_PROGRESS)
-#endif
-        mbedtls_ssl_send_alert_message(ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
-                                       MBEDTLS_SSL_ALERT_MSG_DECRYPT_ERROR);
+    if ((ret = mbedtls_pk_verify(&ssl->session_negotiate->peer_cert->pk, md_alg,
+                                 hash, hashlen, p, sig_len)) != 0) {
+      mbedtls_ssl_send_alert_message(ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
+                                     MBEDTLS_SSL_ALERT_MSG_DECRYPT_ERROR);
       MBEDTLS_SSL_DEBUG_RET(1, "mbedtls_pk_verify", ret);
-#if defined(MBEDTLS_SSL__ECP_RESTARTABLE)
-      if (ret == MBEDTLS_ERR_ECP_IN_PROGRESS)
-        ret = MBEDTLS_ERR_SSL_CRYPTO_IN_PROGRESS;
-#endif
       return (ret);
     }
   }
@@ -2495,7 +2405,7 @@
     return (0);
   }
 
-  if ((ret = mbedtls_ssl_read_record(ssl, 1)) != 0) {
+  if ((ret = mbedtls_ssl_read_record(ssl)) != 0) {
     MBEDTLS_SSL_DEBUG_RET(1, "mbedtls_ssl_read_record", ret);
     return (ret);
   }
@@ -2546,26 +2456,10 @@
   buf = ssl->in_msg;
 
   /* certificate_types */
-  if (ssl->in_hslen <= mbedtls_ssl_hs_hdr_len(ssl)) {
-    MBEDTLS_SSL_DEBUG_MSG(1, ("bad certificate request message"));
-    mbedtls_ssl_send_alert_message(ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
-                                   MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR);
-    return (MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST);
-  }
   cert_type_len = buf[mbedtls_ssl_hs_hdr_len(ssl)];
   n = cert_type_len;
 
-  /*
-   * In the subsequent code there are two paths that read from buf:
-   *     * the length of the signature algorithms field (if minor version of
-   *       SSL is 3),
-   *     * distinguished name length otherwise.
-   * Both reach at most the index:
-   *    ...hdr_len + 2 + n,
-   * therefore the buffer length at this point must be greater than that
-   * regardless of the actual code path.
-   */
-  if (ssl->in_hslen <= mbedtls_ssl_hs_hdr_len(ssl) + 2 + n) {
+  if (ssl->in_hslen < mbedtls_ssl_hs_hdr_len(ssl) + 2 + n) {
     MBEDTLS_SSL_DEBUG_MSG(1, ("bad certificate request message"));
     mbedtls_ssl_send_alert_message(ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                    MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR);
@@ -2578,31 +2472,9 @@
     size_t sig_alg_len = ((buf[mbedtls_ssl_hs_hdr_len(ssl) + 1 + n] << 8) |
                           (buf[mbedtls_ssl_hs_hdr_len(ssl) + 2 + n]));
 #if defined(MBEDTLS_DEBUG_C)
-    unsigned char *sig_alg;
+    unsigned char *sig_alg = buf + mbedtls_ssl_hs_hdr_len(ssl) + 3 + n;
     size_t i;
-#endif
 
-    /*
-     * The furthest access in buf is in the loop few lines below:
-     *     sig_alg[i + 1],
-     * where:
-     *     sig_alg = buf + ...hdr_len + 3 + n,
-     *     max(i) = sig_alg_len - 1.
-     * Therefore the furthest access is:
-     *     buf[...hdr_len + 3 + n + sig_alg_len - 1 + 1],
-     * which reduces to:
-     *     buf[...hdr_len + 3 + n + sig_alg_len],
-     * which is one less than we need the buf to be.
-     */
-    if (ssl->in_hslen <= mbedtls_ssl_hs_hdr_len(ssl) + 3 + n + sig_alg_len) {
-      MBEDTLS_SSL_DEBUG_MSG(1, ("bad certificate request message"));
-      mbedtls_ssl_send_alert_message(ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
-                                     MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR);
-      return (MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST);
-    }
-
-#if defined(MBEDTLS_DEBUG_C)
-    sig_alg = buf + mbedtls_ssl_hs_hdr_len(ssl) + 3 + n;
     for (i = 0; i < sig_alg_len; i += 2) {
       MBEDTLS_SSL_DEBUG_MSG(3, ("Supported Signature Algorithm found: %d"
                                 ",%d",
@@ -2611,6 +2483,13 @@
 #endif
 
     n += 2 + sig_alg_len;
+
+    if (ssl->in_hslen < mbedtls_ssl_hs_hdr_len(ssl) + 2 + n) {
+      MBEDTLS_SSL_DEBUG_MSG(1, ("bad certificate request message"));
+      mbedtls_ssl_send_alert_message(ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
+                                     MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR);
+      return (MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST);
+    }
   }
 #endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
 
@@ -2638,7 +2517,7 @@
 
   MBEDTLS_SSL_DEBUG_MSG(2, ("=> parse server hello done"));
 
-  if ((ret = mbedtls_ssl_read_record(ssl, 1)) != 0) {
+  if ((ret = mbedtls_ssl_read_record(ssl)) != 0) {
     MBEDTLS_SSL_DEBUG_RET(1, "mbedtls_ssl_read_record", ret);
     return (ret);
   }
@@ -2723,52 +2602,25 @@
      */
     i = 4;
 
-#if defined(MBEDTLS_SSL__ECP_RESTARTABLE)
-    if (ssl->handshake->ecrs_enabled) {
-      if (ssl->handshake->ecrs_state == ssl_ecrs_cke_ecdh_calc_secret)
-        goto ecdh_calc_secret;
-
-      mbedtls_ecdh_enable_restart(&ssl->handshake->ecdh_ctx);
-    }
-#endif
-
     ret = mbedtls_ecdh_make_public(&ssl->handshake->ecdh_ctx, &n,
                                    &ssl->out_msg[i], 1000, ssl->conf->f_rng,
                                    ssl->conf->p_rng);
     if (ret != 0) {
       MBEDTLS_SSL_DEBUG_RET(1, "mbedtls_ecdh_make_public", ret);
-#if defined(MBEDTLS_SSL__ECP_RESTARTABLE)
-      if (ret == MBEDTLS_ERR_ECP_IN_PROGRESS)
-        ret = MBEDTLS_ERR_SSL_CRYPTO_IN_PROGRESS;
-#endif
       return (ret);
     }
 
-    MBEDTLS_SSL_DEBUG_ECDH(3, &ssl->handshake->ecdh_ctx, MBEDTLS_DEBUG_ECDH_Q);
-
-#if defined(MBEDTLS_SSL__ECP_RESTARTABLE)
-    if (ssl->handshake->ecrs_enabled) {
-      ssl->handshake->ecrs_n = n;
-      ssl->handshake->ecrs_state = ssl_ecrs_cke_ecdh_calc_secret;
-    }
+    MBEDTLS_SSL_DEBUG_ECP(3, "ECDH: Q", &ssl->handshake->ecdh_ctx.Q);
 
-  ecdh_calc_secret:
-    if (ssl->handshake->ecrs_enabled)
-      n = ssl->handshake->ecrs_n;
-#endif
     if ((ret = mbedtls_ecdh_calc_secret(
              &ssl->handshake->ecdh_ctx, &ssl->handshake->pmslen,
              ssl->handshake->premaster, MBEDTLS_MPI_MAX_SIZE, ssl->conf->f_rng,
              ssl->conf->p_rng)) != 0) {
       MBEDTLS_SSL_DEBUG_RET(1, "mbedtls_ecdh_calc_secret", ret);
-#if defined(MBEDTLS_SSL__ECP_RESTARTABLE)
-      if (ret == MBEDTLS_ERR_ECP_IN_PROGRESS)
-        ret = MBEDTLS_ERR_SSL_CRYPTO_IN_PROGRESS;
-#endif
       return (ret);
     }
 
-    MBEDTLS_SSL_DEBUG_ECDH(3, &ssl->handshake->ecdh_ctx, MBEDTLS_DEBUG_ECDH_Z);
+    MBEDTLS_SSL_DEBUG_MPI(3, "ECDH: z", &ssl->handshake->ecdh_ctx.z);
   } else
 #endif /* MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED ||                            \
           MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED ||                          \
@@ -2787,7 +2639,7 @@
     i = 4;
     n = ssl->conf->psk_identity_len;
 
-    if (i + 2 + n > MBEDTLS_SSL_OUT_CONTENT_LEN) {
+    if (i + 2 + n > MBEDTLS_SSL_MAX_CONTENT_LEN) {
       MBEDTLS_SSL_DEBUG_MSG(1, ("psk identity too long or "
                                 "SSL buffer too short"));
       return (MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL);
@@ -2818,7 +2670,7 @@
        */
       n = ssl->handshake->dhm_ctx.len;
 
-      if (i + 2 + n > MBEDTLS_SSL_OUT_CONTENT_LEN) {
+      if (i + 2 + n > MBEDTLS_SSL_MAX_CONTENT_LEN) {
         MBEDTLS_SSL_DEBUG_MSG(1, ("psk identity or DHM size too long"
                                   " or SSL buffer too short"));
         return (MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL);
@@ -2844,14 +2696,13 @@
        */
       ret = mbedtls_ecdh_make_public(
           &ssl->handshake->ecdh_ctx, &n, &ssl->out_msg[i],
-          MBEDTLS_SSL_OUT_CONTENT_LEN - i, ssl->conf->f_rng, ssl->conf->p_rng);
+          MBEDTLS_SSL_MAX_CONTENT_LEN - i, ssl->conf->f_rng, ssl->conf->p_rng);
       if (ret != 0) {
         MBEDTLS_SSL_DEBUG_RET(1, "mbedtls_ecdh_make_public", ret);
         return (ret);
       }
 
-      MBEDTLS_SSL_DEBUG_ECDH(3, &ssl->handshake->ecdh_ctx,
-                             MBEDTLS_DEBUG_ECDH_Q);
+      MBEDTLS_SSL_DEBUG_ECP(3, "ECDH: Q", &ssl->handshake->ecdh_ctx.Q);
     } else
 #endif /* MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED */
     {
@@ -2879,7 +2730,7 @@
 
     ret = mbedtls_ecjpake_write_round_two(&ssl->handshake->ecjpake_ctx,
                                           ssl->out_msg + i,
-                                          MBEDTLS_SSL_OUT_CONTENT_LEN - i, &n,
+                                          MBEDTLS_SSL_MAX_CONTENT_LEN - i, &n,
                                           ssl->conf->f_rng, ssl->conf->p_rng);
     if (ret != 0) {
       MBEDTLS_SSL_DEBUG_RET(1, "mbedtls_ecjpake_write_round_two", ret);
@@ -2907,8 +2758,8 @@
 
   ssl->state++;
 
-  if ((ret = mbedtls_ssl_write_handshake_msg(ssl)) != 0) {
-    MBEDTLS_SSL_DEBUG_RET(1, "mbedtls_ssl_write_handshake_msg", ret);
+  if ((ret = mbedtls_ssl_write_record(ssl)) != 0) {
+    MBEDTLS_SSL_DEBUG_RET(1, "mbedtls_ssl_write_record", ret);
     return (ret);
   }
 
@@ -2958,17 +2809,9 @@
   unsigned char *hash_start = hash;
   mbedtls_md_type_t md_alg = MBEDTLS_MD_NONE;
   unsigned int hashlen;
-  void *rs_ctx = NULL;
 
   MBEDTLS_SSL_DEBUG_MSG(2, ("=> write certificate verify"));
 
-#if defined(MBEDTLS_SSL__ECP_RESTARTABLE)
-  if (ssl->handshake->ecrs_enabled &&
-      ssl->handshake->ecrs_state == ssl_ecrs_crt_vrfy_sign) {
-    goto sign;
-  }
-#endif
-
   if ((ret = mbedtls_ssl_derive_keys(ssl)) != 0) {
     MBEDTLS_SSL_DEBUG_RET(1, "mbedtls_ssl_derive_keys", ret);
     return (ret);
@@ -2996,15 +2839,8 @@
   }
 
   /*
-   * Make a signature of the handshake digests
+   * Make an RSA signature of the handshake digests
    */
-#if defined(MBEDTLS_SSL__ECP_RESTARTABLE)
-  if (ssl->handshake->ecrs_enabled)
-    ssl->handshake->ecrs_state = ssl_ecrs_crt_vrfy_sign;
-
-sign:
-#endif
-
   ssl->handshake->calc_verify(ssl, hash);
 
 #if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1) ||      \
@@ -3072,20 +2908,10 @@
     return (MBEDTLS_ERR_SSL_INTERNAL_ERROR);
   }
 
-#if defined(MBEDTLS_SSL__ECP_RESTARTABLE)
-  if (ssl->handshake->ecrs_enabled)
-    rs_ctx = &ssl->handshake->ecrs_ctx.pk;
-#endif
-
-  if ((ret = mbedtls_pk_sign_restartable(
-           mbedtls_ssl_own_key(ssl), md_alg, hash_start, hashlen,
-           ssl->out_msg + 6 + offset, &n, ssl->conf->f_rng, ssl->conf->p_rng,
-           rs_ctx)) != 0) {
+  if ((ret = mbedtls_pk_sign(mbedtls_ssl_own_key(ssl), md_alg, hash_start,
+                             hashlen, ssl->out_msg + 6 + offset, &n,
+                             ssl->conf->f_rng, ssl->conf->p_rng)) != 0) {
     MBEDTLS_SSL_DEBUG_RET(1, "mbedtls_pk_sign", ret);
-#if defined(MBEDTLS_SSL__ECP_RESTARTABLE)
-    if (ret == MBEDTLS_ERR_ECP_IN_PROGRESS)
-      ret = MBEDTLS_ERR_SSL_CRYPTO_IN_PROGRESS;
-#endif
     return (ret);
   }
 
@@ -3098,8 +2924,8 @@
 
   ssl->state++;
 
-  if ((ret = mbedtls_ssl_write_handshake_msg(ssl)) != 0) {
-    MBEDTLS_SSL_DEBUG_RET(1, "mbedtls_ssl_write_handshake_msg", ret);
+  if ((ret = mbedtls_ssl_write_record(ssl)) != 0) {
+    MBEDTLS_SSL_DEBUG_RET(1, "mbedtls_ssl_write_record", ret);
     return (ret);
   }
 
@@ -3124,7 +2950,7 @@
 
   MBEDTLS_SSL_DEBUG_MSG(2, ("=> parse new session ticket"));
 
-  if ((ret = mbedtls_ssl_read_record(ssl, 1)) != 0) {
+  if ((ret = mbedtls_ssl_read_record(ssl)) != 0) {
     MBEDTLS_SSL_DEBUG_RET(1, "mbedtls_ssl_read_record", ret);
     return (ret);
   }
@@ -3156,8 +2982,7 @@
 
   msg = ssl->in_msg + mbedtls_ssl_hs_hdr_len(ssl);
 
-  lifetime =
-      (((uint32_t)msg[0]) << 24) | (msg[1] << 16) | (msg[2] << 8) | (msg[3]);
+  lifetime = (msg[0] << 24) | (msg[1] << 16) | (msg[2] << 8) | (msg[3]);
 
   ticket_len = (msg[4] << 8) | (msg[5]);
 
@@ -3181,8 +3006,8 @@
   if (ticket_len == 0)
     return (0);
 
-  mbedtls_platform_zeroize(ssl->session_negotiate->ticket,
-                           ssl->session_negotiate->ticket_len);
+  mbedtls_zeroize(ssl->session_negotiate->ticket,
+                  ssl->session_negotiate->ticket_len);
   mbedtls_free(ssl->session_negotiate->ticket);
   ssl->session_negotiate->ticket = NULL;
   ssl->session_negotiate->ticket_len = 0;
@@ -3231,10 +3056,10 @@
 #if defined(MBEDTLS_SSL_PROTO_DTLS)
   if (ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM &&
       ssl->handshake->retransmit_state == MBEDTLS_SSL_RETRANS_SENDING) {
-    if ((ret = mbedtls_ssl_flight_transmit(ssl)) != 0)
+    if ((ret = mbedtls_ssl_resend(ssl)) != 0)
       return (ret);
   }
-#endif /* MBEDTLS_SSL_PROTO_DTLS */
+#endif
 
   /* Change state now, so that it is right in mbedtls_ssl_read_record(), used
    * by DTLS for dropping out-of-sequence ChangeCipherSpec records */
