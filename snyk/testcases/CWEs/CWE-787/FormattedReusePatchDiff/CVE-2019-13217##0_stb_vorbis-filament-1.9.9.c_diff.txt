--- /home/V1SCAN/CWE-787/FormattedUsed/stb_vorbis-filament-1.9.9.c	2023-12-06 18:19:02.457866908 +0900
+++ /home/V1SCAN/CWE-787/FormattedPatch/NEW##CVE-2019-13217##0##nothings@@stb##stb_vorbis.c	2023-12-06 18:19:03.747911134 +0900
@@ -1,4 +1,4 @@
-// Ogg Vorbis audio decoder - v1.15 - public domain
+// Ogg Vorbis audio decoder - v1.16 - public domain
 // http://nothings.org/stb_vorbis/
 //
 // Original version written by Sean Barrett in 2007.
@@ -33,17 +33,19 @@
 //    Timur Gagiev
 //
 // Partial history:
-//    1.15    - 2019-02-07 - explicit failure if Ogg Skeleton data is found
-//    1.14    - 2018-02-11 - delete bogus dealloca usage
-//    1.13    - 2018-01-29 - fix truncation of last frame (hopefully)
-//    1.12    - 2017-11-21 - limit residue begin/end to blocksize/2 to avoid
-//    large temp allocs in bad/corrupt files 1.11    - 2017-07-23 - fix MinGW
-//    compilation 1.10    - 2017-03-03 - more robust seeking; fix negative
-//    ilog(); clear error in open_memory 1.09    - 2016-04-04 - back out
-//    'truncation of last frame' fix from previous version 1.08    - 2016-04-02
-//    - warnings; setup memory leaks; truncation of last frame 1.07    -
-//    2015-01-16 - fixes for crashes on invalid files; warning fixes; const 1.06
-//    - 2015-08-31 - full, correct support for seeking API (Dougall Johnson)
+//    1.17    - 2019-07-08 - fix CVE-2019-13217..CVE-2019-13223 (by
+//    ForAllSecure) 1.16    - 2019-03-04 - fix warnings 1.15    - 2019-02-07 -
+//    explicit failure if Ogg Skeleton data is found 1.14    - 2018-02-11 -
+//    delete bogus dealloca usage 1.13    - 2018-01-29 - fix truncation of last
+//    frame (hopefully) 1.12    - 2017-11-21 - limit residue begin/end to
+//    blocksize/2 to avoid large temp allocs in bad/corrupt files 1.11    -
+//    2017-07-23 - fix MinGW compilation 1.10    - 2017-03-03 - more robust
+//    seeking; fix negative ilog(); clear error in open_memory 1.09    -
+//    2016-04-04 - back out 'truncation of last frame' fix from previous version
+//    1.08    - 2016-04-02 - warnings; setup memory leaks; truncation of last
+//    frame 1.07    - 2015-01-16 - fixes for crashes on invalid files; warning
+//    fixes; const 1.06    - 2015-08-31 - full, correct support for seeking API
+//    (Dougall Johnson)
 //                           some crash fixes when out of memory or with corrupt
 //                           files fix some inappropriately signed shifts
 //    1.05    - 2015-04-19 - don't define __forceinline if it's redundant
@@ -1213,8 +1215,10 @@
   if ((int)floor(pow((float)r + 1, dim)) <=
       entries) // (int) cast for MinGW warning;
     ++r;       // floor() to avoid _ftol() when non-CRT
-  assert(pow((float)r + 1, dim) > entries);
-  assert((int)floor(pow((float)r, dim)) <= entries); // (int),floor() as above
+  if (pow((float)r + 1, dim) <= entries)
+    return -1;
+  if ((int)floor(pow((float)r, dim)) > entries)
+    return -1;
   return r;
 }
 
@@ -2068,7 +2072,7 @@
   if (x1 > n)
     x1 = n;
   if (x < x1) {
-    LINE_OP(output[x], inverse_db_table[y]);
+    LINE_OP(output[x], inverse_db_table[y & 255]);
     for (++x; x < x1; ++x) {
       err += ady;
       if (err >= adx) {
@@ -2076,7 +2080,7 @@
         y += sy;
       } else
         y += base;
-      LINE_OP(output[x], inverse_db_table[y]);
+      LINE_OP(output[x], inverse_db_table[y & 255]);
     }
   }
 }
@@ -3119,7 +3123,6 @@
     return f->window[0];
   if (len == f->blocksize_1)
     return f->window[1];
-  assert(0);
   return NULL;
 }
 
@@ -3540,6 +3543,8 @@
   if (f->previous_length) {
     int i, j, n = f->previous_length;
     float *w = get_window(f, n);
+    if (w == NULL)
+      return 0;
     for (i = 0; i < f->channels; ++i) {
       for (j = 0; j < n; ++j)
         f->channel_buffers[i][left + j] =
@@ -3820,6 +3825,8 @@
       while (current_entry < c->entries) {
         int limit = c->entries - current_entry;
         int n = get_bits(f, ilog(limit));
+        if (current_length >= 32)
+          return error(f, VORBIS_invalid_setup);
         if (current_entry + n > (int)c->entries) {
           return error(f, VORBIS_invalid_setup);
         }
@@ -3944,7 +3951,10 @@
       c->value_bits = get_bits(f, 4) + 1;
       c->sequence_p = get_bits(f, 1);
       if (c->lookup_type == 1) {
-        c->lookup_values = lookup1_values(c->entries, c->dimensions);
+        int values = lookup1_values(c->entries, c->dimensions);
+        if (values < 0)
+          return error(f, VORBIS_invalid_setup);
+        c->lookup_values = (uint32)values;
       } else {
         c->lookup_values = c->entries * c->dimensions;
       }
@@ -4103,6 +4113,9 @@
         p[j].id = j;
       }
       qsort(p, g->values, sizeof(p[0]), point_compare);
+      for (j = 0; j < g->values - 1; ++j)
+        if (p[j].x == p[j + 1].x)
+          return error(f, VORBIS_invalid_setup);
       for (j = 0; j < g->values; ++j)
         g->sorted_order[j] = (uint8)p[j].id;
       // precompute the neighbors
@@ -4206,6 +4219,8 @@
       max_submaps = m->submaps;
     if (get_bits(f, 1)) {
       m->coupling_steps = get_bits(f, 8) + 1;
+      if (m->coupling_steps > f->channels)
+        return error(f, VORBIS_invalid_setup);
       for (k = 0; k < m->coupling_steps; ++k) {
         m->chan[k].magnitude = get_bits(f, ilog(f->channels - 1));
         m->chan[k].angle = get_bits(f, ilog(f->channels - 1));
@@ -5229,7 +5244,13 @@
 
 stb_vorbis *stb_vorbis_open_filename(const char *filename, int *error,
                                      const stb_vorbis_alloc *alloc) {
-  FILE *f = fopen(filename, "rb");
+  FILE *f;
+#if defined(_WIN32) && defined(__STDC_WANT_SECURE_LIB__)
+  if (0 != fopen_s(&f, filename, "rb"))
+    f = NULL;
+#else
+  f = fopen(filename, "rb");
+#endif
   if (f)
     return stb_vorbis_open_file(f, TRUE, error, alloc);
   if (error)
@@ -5654,31 +5675,38 @@
 #endif // STB_VORBIS_NO_PULLDATA_API
 
 /* Version history
-    1.12    - 2017-11-21 - limit residue begin/end to blocksize/2 to avoid large
-   temp allocs in bad/corrupt files 1.11    - 2017-07-23 - fix MinGW compilation
-    1.10    - 2017-03-03 - more robust seeking; fix negative ilog(); clear error
-   in open_memory 1.09    - 2016-04-04 - back out 'avoid discarding last frame'
-   fix from previous version 1.08    - 2016-04-02 - fixed multiple warnings; fix
-   setup memory leaks; avoid discarding last frame of audio data 1.07    -
-   2015-01-16 - fixed some warnings, fix mingw, const-correct API some more
-   crash fixes when out of memory or with corrupt files 1.06    - 2015-08-31 -
-   full, correct support for seeking API (Dougall Johnson) some crash fixes when
-   out of memory or with corrupt files 1.05    - 2015-04-19 - don't define
-   __forceinline if it's redundant 1.04    - 2014-08-27 - fix missing
-   const-correct case in API 1.03    - 2014-08-07 - Warning fixes 1.02    -
-   2014-07-09 - Declare qsort compare function _cdecl on windows 1.01    -
-   2014-06-18 - fix stb_vorbis_get_samples_float 1.0     - 2014-05-26 - fix
-   memory leaks; fix warnings; fix bugs in multichannel (API change) report
-   sample rate for decode-full-file funcs 0.99996 - bracket #include <malloc.h>
-   for macintosh compilation by Laurent Gomila 0.99995 - use union instead of
-   pointer-cast for fast-float-to-int to avoid alias-optimization problem
-    0.99994 - change fast-float-to-int to work in single-precision FPU mode,
-   remove endian-dependence 0.99993 - remove assert that fired on legal files
-   with empty tables 0.99992 - rewind-to-start 0.99991 - bugfix to
-   stb_vorbis_get_samples_short by Bernhard Wodo 0.9999 - (should have been
-   0.99990) fix no-CRT support, compiling as C++ 0.9998 - add a full-decode
-   function with a memory source 0.9997 - fix a bug in the read-from-FILE case
-   in 0.9996 addition 0.9996 - query length of vorbis stream in samples/seconds
+    1.17    - 2019-07-08 - fix CVE-2019-13217, -13218, -13219, -13220, -13221,
+   -13223, -13223 found with Mayhem by ForAllSecure 1.16    - 2019-03-04 - fix
+   warnings 1.15    - 2019-02-07 - explicit failure if Ogg Skeleton data is
+   found 1.14    - 2018-02-11 - delete bogus dealloca usage 1.13    - 2018-01-29
+   - fix truncation of last frame (hopefully) 1.12    - 2017-11-21 - limit
+   residue begin/end to blocksize/2 to avoid large temp allocs in bad/corrupt
+   files 1.11    - 2017-07-23 - fix MinGW compilation 1.10    - 2017-03-03 -
+   more robust seeking; fix negative ilog(); clear error in open_memory 1.09 -
+   2016-04-04 - back out 'avoid discarding last frame' fix from previous version
+    1.08    - 2016-04-02 - fixed multiple warnings; fix setup memory leaks;
+                           avoid discarding last frame of audio data
+    1.07    - 2015-01-16 - fixed some warnings, fix mingw, const-correct API
+                           some more crash fixes when out of memory or with
+   corrupt files 1.06    - 2015-08-31 - full, correct support for seeking API
+   (Dougall Johnson) some crash fixes when out of memory or with corrupt files
+    1.05    - 2015-04-19 - don't define __forceinline if it's redundant
+    1.04    - 2014-08-27 - fix missing const-correct case in API
+    1.03    - 2014-08-07 - Warning fixes
+    1.02    - 2014-07-09 - Declare qsort compare function _cdecl on windows
+    1.01    - 2014-06-18 - fix stb_vorbis_get_samples_float
+    1.0     - 2014-05-26 - fix memory leaks; fix warnings; fix bugs in
+   multichannel (API change) report sample rate for decode-full-file funcs
+    0.99996 - bracket #include <malloc.h> for macintosh compilation by Laurent
+   Gomila 0.99995 - use union instead of pointer-cast for fast-float-to-int to
+   avoid alias-optimization problem 0.99994 - change fast-float-to-int to work
+   in single-precision FPU mode, remove endian-dependence 0.99993 - remove
+   assert that fired on legal files with empty tables 0.99992 - rewind-to-start
+    0.99991 - bugfix to stb_vorbis_get_samples_short by Bernhard Wodo
+    0.9999 - (should have been 0.99990) fix no-CRT support, compiling as C++
+    0.9998 - add a full-decode function with a memory source
+    0.9997 - fix a bug in the read-from-FILE case in 0.9996 addition
+    0.9996 - query length of vorbis stream in samples/seconds
     0.9995 - bugfix to another optimization that only happened in certain files
     0.9994 - bugfix to one of the optimizations that caused significant (but
    inaudible?) errors 0.9993 - performance improvements; runs in 99% to 104% of
