--- /home/V1SCAN/CWE-787/FormattedUsed/lspci-reactos-0.4.13.c	2023-12-13 06:17:19.039355088 +0900
+++ /home/V1SCAN/CWE-787/FormattedVul/OLD##CVE-2018-8800##0##rdesktop@@rdesktop##lspci.c	2023-12-13 06:17:20.389353185 +0900
@@ -3,9 +3,9 @@
    Support for the Matrox "lspci" channel
    Copyright (C) 2005 Matrox Graphics Inc.
 
-   This program is free software; you can redistribute it and/or modify
+   This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
-   the Free Software Foundation; either version 2 of the License, or
+   the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
 
    This program is distributed in the hope that it will be useful,
@@ -13,9 +13,8 @@
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
 
-   You should have received a copy of the GNU General Public License along
-   with this program; if not, write to the Free Software Foundation, Inc.,
-   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #include "rdesktop.h"
@@ -36,16 +35,17 @@
 
 static pci_device current_device;
 
-static void lspci_send(RDPCLIENT *This, const char *output);
+static void lspci_send(const char *output);
 
 /* Handle one line of output from the lspci subprocess */
-static BOOL handle_child_line(RDPCLIENT *This, const char *line, void *data) {
+static RD_BOOL handle_child_line(const char *line, void *data) {
+  UNUSED(data);
   const char *val;
   char buf[1024];
 
   if (str_startswith(line, "Class:")) {
     val = line + sizeof("Class:");
-    /* Skip whitespace and second Class: occurance */
+    /* Skip whitespace and second Class: occurrence */
     val += strspn(val, " \t") + sizeof("Class");
     current_device.klass = strtol(val, NULL, 16);
   } else if (str_startswith(line, "Vendor:")) {
@@ -75,31 +75,33 @@
              current_device.klass, current_device.vendor, current_device.device,
              current_device.subvendor, current_device.subdevice,
              current_device.revision, current_device.progif);
-    lspci_send(This, buf);
+    lspci_send(buf);
     memset(&current_device, 0, sizeof(current_device));
   } else {
-    warning("lspci: Unrecoqnized line '%s'\n", line);
+    logger(Core, Warning, "handle_child_line(), Unrecognized lspci line '%s'",
+           line);
   }
   return True;
 }
 
 /* Process one line of input from virtual channel */
-static BOOL lspci_process_line(RDPCLIENT *This, const char *line, void *data) {
+static RD_BOOL lspci_process_line(const char *line, void *data) {
+  UNUSED(data);
   char *lspci_command[5] = {"lspci", "-m", "-n", "-v", NULL};
 
   if (!strcmp(line, "LSPCI")) {
     memset(&current_device, 0, sizeof(current_device));
-    subprocess(This, lspci_command, handle_child_line, NULL);
+    subprocess(lspci_command, handle_child_line, NULL);
     /* Send single dot to indicate end of enumeration */
-    lspci_send(This, ".\n");
+    lspci_send(".\n");
   } else {
-    error("lspci protocol error: Invalid line '%s'\n", line);
+    logger(Core, Error, "lspci_process_line(), invalid line '%s'", line);
   }
   return True;
 }
 
 /* Process new data from the virtual channel */
-static void lspci_process(RDPCLIENT *This, STREAM s) {
+static void lspci_process(STREAM s) {
   unsigned int pkglen;
   static char *rest = NULL;
   char *buf;
@@ -108,36 +110,26 @@
   /* str_handle_lines requires null terminated strings */
   buf = xmalloc(pkglen + 1);
   STRNCPY(buf, (char *)s->p, pkglen + 1);
-#if 0
-	printf("lspci recv:\n");
-	hexdump(s->p, pkglen);
-#endif
-
-  str_handle_lines(This, buf, &rest, lspci_process_line, NULL);
+  str_handle_lines(buf, &rest, lspci_process_line, NULL);
   xfree(buf);
 }
 
 /* Initialize this module: Register the lspci channel */
-BOOL lspci_init(RDPCLIENT *This) {
+RD_BOOL
+lspci_init(void) {
   lspci_channel = channel_register(
-      This, "lspci", CHANNEL_OPTION_INITIALIZED | CHANNEL_OPTION_ENCRYPT_RDP,
+      "lspci", CHANNEL_OPTION_INITIALIZED | CHANNEL_OPTION_ENCRYPT_RDP,
       lspci_process);
   return (lspci_channel != NULL);
 }
 
 /* Send data to channel */
-static void lspci_send(RDPCLIENT *This, const char *output) {
+static void lspci_send(const char *output) {
   STREAM s;
   size_t len;
 
   len = strlen(output);
-  s = channel_init(This, lspci_channel, len);
+  s = channel_init(lspci_channel, len);
   out_uint8p(s, output, len) s_mark_end(s);
-
-#if 0
-	printf("lspci send:\n");
-	hexdump(s->channel_hdr + 8, s->end - s->channel_hdr - 8);
-#endif
-
-  channel_send(This, s, lspci_channel);
+  channel_send(s, lspci_channel);
 }
