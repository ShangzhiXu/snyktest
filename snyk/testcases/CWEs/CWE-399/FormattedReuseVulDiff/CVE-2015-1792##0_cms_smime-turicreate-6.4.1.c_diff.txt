--- /home/V1SCAN/CWE-399/FormattedUsed/cms_smime-turicreate-6.4.1.c	2023-12-12 05:12:46.188268900 +0900
+++ /home/V1SCAN/CWE-399/FormattedVul/OLD##CVE-2015-1792##0##openssl@@openssl##cms_smime.c	2023-12-12 05:12:46.238269167 +0900
@@ -1,10 +1,9 @@
 /* crypto/cms/cms_smime.c */
-/*
- * Written by Dr Stephen N Henson (steve@openssl.org) for the OpenSSL
+/* Written by Dr Stephen N Henson (steve@openssl.org) for the OpenSSL
  * project.
  */
 /* ====================================================================
- * Copyright (c) 2008-2019 The OpenSSL Project.  All rights reserved.
+ * Copyright (c) 2008 The OpenSSL Project.  All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
@@ -127,7 +126,7 @@
       tbio = BIO_pop(f);
       BIO_free(f);
       f = tbio;
-    } while (f && f != upto);
+    } while (f != upto);
   } else
     BIO_free_all(f);
 }
@@ -340,11 +339,11 @@
     }
   }
 
-  /*
-   * Performance optimization: if the content is a memory BIO then store
-   * its contents in a temporary read only memory BIO. This avoids
-   * potentially large numbers of slow copies of data which will occur when
-   * reading from a read write memory BIO when signatures are calculated.
+  /* Performance optimization: if the content is a memory BIO then
+   * store its contents in a temporary read only memory BIO. This
+   * avoids potentially large numbers of slow copies of data which will
+   * occur when reading from a read write memory BIO when signatures
+   * are calculated.
    */
 
   if (dcont && (BIO_method_type(dcont) == BIO_TYPE_MEM)) {
@@ -354,7 +353,7 @@
     tmpin = BIO_new_mem_buf(ptr, len);
     if (tmpin == NULL) {
       CMSerr(CMS_F_CMS_VERIFY, ERR_R_MALLOC_FAILURE);
-      goto err2;
+      return 0;
     }
   } else
     tmpin = dcont;
@@ -385,7 +384,6 @@
   else
     BIO_free_all(cmsbio);
 
-err2:
   if (cms_certs)
     sk_X509_pop_free(cms_certs, X509_free);
   if (crls)
@@ -569,7 +567,7 @@
   STACK_OF(CMS_RecipientInfo) * ris;
   CMS_RecipientInfo *ri;
   int i, r, ri_type;
-  int debug = 0, match_ri = 0;
+  int debug = 0;
   ris = CMS_get0_RecipientInfos(cms);
   if (ris)
     debug = cms->d.envelopedData->encryptedContentInfo->debug;
@@ -583,7 +581,6 @@
     ri = sk_CMS_RecipientInfo_value(ris, i);
     if (CMS_RecipientInfo_type(ri) != ri_type)
       continue;
-    match_ri = 1;
     if (ri_type == CMS_RECIPINFO_AGREE) {
       r = cms_kari_set1_pkey(cms, ri, pk, cert);
       if (r > 0)
@@ -591,18 +588,17 @@
       if (r < 0)
         return 0;
     }
-    /*
-     * If we have a cert try matching RecipientInfo otherwise try them
-     * all.
+    /* If we have a cert try matching RecipientInfo
+     * otherwise try them all.
      */
     else if (!cert || !CMS_RecipientInfo_ktri_cert_cmp(ri, cert)) {
       CMS_RecipientInfo_set0_pkey(ri, pk);
       r = CMS_RecipientInfo_decrypt(cms, ri);
       CMS_RecipientInfo_set0_pkey(ri, NULL);
       if (cert) {
-        /*
-         * If not debugging clear any error and return success to
-         * avoid leaking of information useful to MMA
+        /* If not debugging clear any error and
+         * return success to avoid leaking of
+         * information useful to MMA
          */
         if (!debug) {
           ERR_clear_error();
@@ -613,17 +609,17 @@
         CMSerr(CMS_F_CMS_DECRYPT_SET1_PKEY, CMS_R_DECRYPT_ERROR);
         return 0;
       }
-      /*
-       * If no cert and not debugging don't leave loop after first
-       * successful decrypt. Always attempt to decrypt all recipients
-       * to avoid leaking timing of a successful decrypt.
+      /* If no cert and not debugging don't leave loop
+       * after first successful decrypt. Always attempt
+       * to decrypt all recipients to avoid leaking timing
+       * of a successful decrypt.
        */
       else if (r > 0 && debug)
         return 1;
     }
   }
   /* If no cert and not debugging always return success */
-  if (match_ri && !cert && !debug) {
+  if (!cert && !debug) {
     ERR_clear_error();
     return 1;
   }
@@ -643,9 +639,8 @@
     if (CMS_RecipientInfo_type(ri) != CMS_RECIPINFO_KEK)
       continue;
 
-    /*
-     * If we have an id try matching RecipientInfo otherwise try them
-     * all.
+    /* If we have an id try matching RecipientInfo
+     * otherwise try them all.
      */
     if (!id || (CMS_RecipientInfo_kekri_id_cmp(ri, id, idlen) == 0)) {
       CMS_RecipientInfo_set0_key(ri, key, keylen);
@@ -700,10 +695,6 @@
     cms->d.envelopedData->encryptedContentInfo->debug = 1;
   else
     cms->d.envelopedData->encryptedContentInfo->debug = 0;
-  if (!cert)
-    cms->d.envelopedData->encryptedContentInfo->havenocert = 1;
-  else
-    cms->d.envelopedData->encryptedContentInfo->havenocert = 0;
   if (!pk && !cert && !dcont && !out)
     return 1;
   if (pk && !CMS_decrypt_set1_pkey(cms, pk, cert))
@@ -720,7 +711,7 @@
   BIO *cmsbio;
   int ret = 0;
   if (!(cmsbio = CMS_dataInit(cms, dcont))) {
-    CMSerr(CMS_F_CMS_FINAL, CMS_R_CMS_LIB);
+    CMSerr(CMS_F_CMS_FINAL, ERR_R_MALLOC_FAILURE);
     return 0;
   }
 
