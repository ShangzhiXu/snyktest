--- /home/V1SCAN/CWE-119/FormattedUsed/lib557-turicreate-6.4.1.c	2023-12-10 02:45:00.770141718 +0900
+++ /home/V1SCAN/CWE-119/FormattedPatch/NEW##CVE-2016-9586##0##curl@@curl##lib557.c	2023-12-10 02:45:01.580182707 +0900
@@ -5,7 +5,7 @@
  *                            | (__| |_| |  _ <| |___
  *                             \___|\___/|_| \_\_____|
  *
- * Copyright (C) 1998 - 2017, Daniel Stenberg, <daniel@haxx.se>, et al.
+ * Copyright (C) 1998 - 2016, Daniel Stenberg, <daniel@haxx.se>, et al.
  *
  * This software is licensed as described in the file COPYING, which
  * you should have received as part of this distribution. The terms
@@ -25,17 +25,10 @@
  * curl_m*printf formatting capabilities and handling of some data types.
  */
 
-#include "test.h"
-
-#include <limits.h>
-
-#ifdef HAVE_LOCALE_H
-#include <locale.h> /* for setlocale() */
-#endif
-
 #include "memdebug.h"
+#include "test.h"
 
-#if (SIZEOF_CURL_OFF_T > SIZEOF_LONG)
+#if (CURL_SIZEOF_CURL_OFF_T > CURL_SIZEOF_LONG)
 #define MPRNT_SUFFIX_CURL_OFF_T LL
 #else
 #define MPRNT_SUFFIX_CURL_OFF_T L
@@ -110,7 +103,7 @@
 
 static int test_unsigned_short_formatting(void) {
   int i, j;
-  int num_ushort_tests = 0;
+  int num_ushort_tests;
   int failed = 0;
 
 #if (SIZEOF_SHORT == 1)
@@ -307,7 +300,7 @@
 
 static int test_signed_short_formatting(void) {
   int i, j;
-  int num_sshort_tests = 0;
+  int num_sshort_tests;
   int failed = 0;
 
 #if (SIZEOF_SHORT == 1)
@@ -667,7 +660,7 @@
 
 static int test_unsigned_int_formatting(void) {
   int i, j;
-  int num_uint_tests = 0;
+  int num_uint_tests;
   int failed = 0;
 
 #if (SIZEOF_INT == 2)
@@ -987,7 +980,7 @@
 
 static int test_signed_int_formatting(void) {
   int i, j;
-  int num_sint_tests = 0;
+  int num_sint_tests;
   int failed = 0;
 
 #if (SIZEOF_INT == 2)
@@ -1517,10 +1510,10 @@
 
 static int test_unsigned_long_formatting(void) {
   int i, j;
-  int num_ulong_tests = 0;
+  int num_ulong_tests;
   int failed = 0;
 
-#if (SIZEOF_LONG == 2)
+#if (CURL_SIZEOF_LONG == 2)
 
   i = 1;
   ul_test[i].num = 0xFFFFUL;
@@ -1567,7 +1560,7 @@
 
   num_ulong_tests = i;
 
-#elif (SIZEOF_LONG == 4)
+#elif (CURL_SIZEOF_LONG == 4)
 
   i = 1;
   ul_test[i].num = 0xFFFFFFFFUL;
@@ -1651,7 +1644,7 @@
 
   num_ulong_tests = i;
 
-#elif (SIZEOF_LONG == 8)
+#elif (CURL_SIZEOF_LONG == 8)
 
   i = 1;
   ul_test[i].num = 0xFFFFFFFFFFFFFFFFUL;
@@ -1836,10 +1829,10 @@
 
 static int test_signed_long_formatting(void) {
   int i, j;
-  int num_slong_tests = 0;
+  int num_slong_tests;
   int failed = 0;
 
-#if (SIZEOF_LONG == 2)
+#if (CURL_SIZEOF_LONG == 2)
 
   i = 1;
   sl_test[i].num = 0x7FFFL;
@@ -1944,7 +1937,7 @@
 
   num_slong_tests = i;
 
-#elif (SIZEOF_LONG == 4)
+#elif (CURL_SIZEOF_LONG == 4)
 
   i = 1;
   sl_test[i].num = 0x7FFFFFFFL;
@@ -2117,7 +2110,7 @@
 
   num_slong_tests = i;
 
-#elif (SIZEOF_LONG == 8)
+#elif (CURL_SIZEOF_LONG == 8)
 
   i = 1;
   sl_test[i].num = 0x7FFFFFFFFFFFFFFFL;
@@ -2366,10 +2359,10 @@
 
 static int test_curl_off_t_formatting(void) {
   int i, j;
-  int num_cofft_tests = 0;
+  int num_cofft_tests;
   int failed = 0;
 
-#if (SIZEOF_CURL_OFF_T == 2)
+#if (CURL_SIZEOF_CURL_OFF_T == 2)
 
   i = 1;
   co_test[i].num = MPRNT_OFF_T_C(0x7FFF);
@@ -2474,7 +2467,7 @@
 
   num_cofft_tests = i;
 
-#elif (SIZEOF_CURL_OFF_T == 4)
+#elif (CURL_SIZEOF_CURL_OFF_T == 4)
 
   i = 1;
   co_test[i].num = MPRNT_OFF_T_C(0x7FFFFFFF);
@@ -2647,7 +2640,7 @@
 
   num_cofft_tests = i;
 
-#elif (SIZEOF_CURL_OFF_T == 8)
+#elif (CURL_SIZEOF_CURL_OFF_T == 8)
 
   i = 1;
   co_test[i].num = MPRNT_OFF_T_C(0x7FFFFFFFFFFFFFFF);
@@ -2869,6 +2862,7 @@
   num_cofft_tests = i;
 
 #endif
+  /* !checksrc! enable LONGLINE */
 
   for (i = 1; i <= num_cofft_tests; i++) {
 
@@ -2910,7 +2904,7 @@
   size_t buflen = strlen(buf);
   if (len != buflen) {
     /* they shouldn't differ */
-    printf("sprintf strlen:%d failed:\nwe '%zu'\nsystem: '%zu'\n", linenumber,
+    printf("sprintf strlen:%d failed:\nwe '%d'\nsystem: '%d'\n", linenumber,
            buflen, len);
     return 1;
   }
@@ -3055,8 +3049,8 @@
 }
 
 /* DBL_MAX value from Linux */
-/* !checksrc! disable PLUSNOSPACE 1 */
-#define MAXIMIZE -1.7976931348623157081452E+308
+#define MAXIMIZE                                                               \
+  -179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
 
 static int test_float_formatting(void) {
   int errors = 0;
@@ -3134,8 +3128,8 @@
                  123456789123456789123456789.2987654);
   errors += strlen_check(buf, 325);
 
-  /* check negative when used signed */
-  curl_msnprintf(buf, sizeof(buf), "%*f", INT_MIN, 9.1);
+  /* 1<<31 turns negative (-2147483648) when used signed */
+  curl_msnprintf(buf, sizeof(buf), "%*f", (1 << 31), 9.1);
   errors += string_check(buf, "9.100000");
 
   /* curl_msnprintf() limits a single float output to 325 bytes maximum
@@ -3176,20 +3170,11 @@
 
   return errors;
 }
-/* !checksrc! enable LONGLINE */
 
 int test(char *URL) {
   int errors = 0;
   (void)URL; /* not used */
 
-#ifdef HAVE_SETLOCALE
-  /*
-   * The test makes assumptions about the numeric locale (specifically,
-   * RADIXCHAR) so set it to a known working (and portable) one.
-   */
-  setlocale(LC_NUMERIC, "C");
-#endif
-
   errors += test_weird_arguments();
 
   errors += test_unsigned_short_formatting();
