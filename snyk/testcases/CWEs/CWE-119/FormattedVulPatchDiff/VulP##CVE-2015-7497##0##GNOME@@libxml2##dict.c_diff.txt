--- /home/V1SCAN/CWE-119/FormattedVul/OLD##CVE-2015-7497##0##GNOME@@libxml2##dict.c	2023-12-10 02:44:14.390186894 +0900
+++ /home/V1SCAN/CWE-119/FormattedPatch/NEW##CVE-2015-7497##0##GNOME@@libxml2##dict.c	2023-12-10 02:44:15.080183577 +0900
@@ -499,7 +499,10 @@
     value += 30 * (*prefix);
 
   if (len > 10) {
-    value += name[len - (plen + 1 + 1)];
+    int offset = len - (plen + 1 + 1);
+    if (offset < 0)
+      offset = len - (10 + 1);
+    value += name[offset];
     len = 10;
     if (plen > 10)
       plen = 10;
@@ -695,10 +698,10 @@
   dict->size = size;
 
   /*	If the two loops are merged, there would be situations where
-      a new entry needs to allocated and data copied into it from
-      the main dict. It is nicer to run through the array twice, first
-      copying all the elements in the main array (less probability of
-      allocate) and then the rest, so we only free in the second loop.
+  a new entry needs to allocated and data copied into it from
+  the main dict. It is nicer to run through the array twice, first
+  copying all the elements in the main array (less probability of
+  allocate) and then the rest, so we only free in the second loop.
   */
   for (i = 0; i < oldsize; i++) {
     if (olddict[i].valid == 0)
