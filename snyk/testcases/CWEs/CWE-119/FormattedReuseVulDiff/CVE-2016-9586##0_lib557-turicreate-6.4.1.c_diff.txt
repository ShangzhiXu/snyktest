--- /home/V1SCAN/CWE-119/FormattedUsed/lib557-turicreate-6.4.1.c	2023-12-10 02:44:53.860069410 +0900
+++ /home/V1SCAN/CWE-119/FormattedVul/OLD##CVE-2016-9586##0##curl@@curl##lib557.c	2023-12-10 02:44:54.880075586 +0900
@@ -5,7 +5,7 @@
  *                            | (__| |_| |  _ <| |___
  *                             \___|\___/|_| \_\_____|
  *
- * Copyright (C) 1998 - 2017, Daniel Stenberg, <daniel@haxx.se>, et al.
+ * Copyright (C) 1998 - 2016, Daniel Stenberg, <daniel@haxx.se>, et al.
  *
  * This software is licensed as described in the file COPYING, which
  * you should have received as part of this distribution. The terms
@@ -25,17 +25,10 @@
  * curl_m*printf formatting capabilities and handling of some data types.
  */
 
-#include "test.h"
-
-#include <limits.h>
-
-#ifdef HAVE_LOCALE_H
-#include <locale.h> /* for setlocale() */
-#endif
-
 #include "memdebug.h"
+#include "test.h"
 
-#if (SIZEOF_CURL_OFF_T > SIZEOF_LONG)
+#if (CURL_SIZEOF_CURL_OFF_T > CURL_SIZEOF_LONG)
 #define MPRNT_SUFFIX_CURL_OFF_T LL
 #else
 #define MPRNT_SUFFIX_CURL_OFF_T L
@@ -110,7 +103,7 @@
 
 static int test_unsigned_short_formatting(void) {
   int i, j;
-  int num_ushort_tests = 0;
+  int num_ushort_tests;
   int failed = 0;
 
 #if (SIZEOF_SHORT == 1)
@@ -307,7 +300,7 @@
 
 static int test_signed_short_formatting(void) {
   int i, j;
-  int num_sshort_tests = 0;
+  int num_sshort_tests;
   int failed = 0;
 
 #if (SIZEOF_SHORT == 1)
@@ -667,7 +660,7 @@
 
 static int test_unsigned_int_formatting(void) {
   int i, j;
-  int num_uint_tests = 0;
+  int num_uint_tests;
   int failed = 0;
 
 #if (SIZEOF_INT == 2)
@@ -987,7 +980,7 @@
 
 static int test_signed_int_formatting(void) {
   int i, j;
-  int num_sint_tests = 0;
+  int num_sint_tests;
   int failed = 0;
 
 #if (SIZEOF_INT == 2)
@@ -1517,10 +1510,10 @@
 
 static int test_unsigned_long_formatting(void) {
   int i, j;
-  int num_ulong_tests = 0;
+  int num_ulong_tests;
   int failed = 0;
 
-#if (SIZEOF_LONG == 2)
+#if (CURL_SIZEOF_LONG == 2)
 
   i = 1;
   ul_test[i].num = 0xFFFFUL;
@@ -1567,7 +1560,7 @@
 
   num_ulong_tests = i;
 
-#elif (SIZEOF_LONG == 4)
+#elif (CURL_SIZEOF_LONG == 4)
 
   i = 1;
   ul_test[i].num = 0xFFFFFFFFUL;
@@ -1651,7 +1644,7 @@
 
   num_ulong_tests = i;
 
-#elif (SIZEOF_LONG == 8)
+#elif (CURL_SIZEOF_LONG == 8)
 
   i = 1;
   ul_test[i].num = 0xFFFFFFFFFFFFFFFFUL;
@@ -1836,10 +1829,10 @@
 
 static int test_signed_long_formatting(void) {
   int i, j;
-  int num_slong_tests = 0;
+  int num_slong_tests;
   int failed = 0;
 
-#if (SIZEOF_LONG == 2)
+#if (CURL_SIZEOF_LONG == 2)
 
   i = 1;
   sl_test[i].num = 0x7FFFL;
@@ -1944,7 +1937,7 @@
 
   num_slong_tests = i;
 
-#elif (SIZEOF_LONG == 4)
+#elif (CURL_SIZEOF_LONG == 4)
 
   i = 1;
   sl_test[i].num = 0x7FFFFFFFL;
@@ -2117,7 +2110,7 @@
 
   num_slong_tests = i;
 
-#elif (SIZEOF_LONG == 8)
+#elif (CURL_SIZEOF_LONG == 8)
 
   i = 1;
   sl_test[i].num = 0x7FFFFFFFFFFFFFFFL;
@@ -2366,10 +2359,10 @@
 
 static int test_curl_off_t_formatting(void) {
   int i, j;
-  int num_cofft_tests = 0;
+  int num_cofft_tests;
   int failed = 0;
 
-#if (SIZEOF_CURL_OFF_T == 2)
+#if (CURL_SIZEOF_CURL_OFF_T == 2)
 
   i = 1;
   co_test[i].num = MPRNT_OFF_T_C(0x7FFF);
@@ -2474,7 +2467,7 @@
 
   num_cofft_tests = i;
 
-#elif (SIZEOF_CURL_OFF_T == 4)
+#elif (CURL_SIZEOF_CURL_OFF_T == 4)
 
   i = 1;
   co_test[i].num = MPRNT_OFF_T_C(0x7FFFFFFF);
@@ -2647,7 +2640,7 @@
 
   num_cofft_tests = i;
 
-#elif (SIZEOF_CURL_OFF_T == 8)
+#elif (CURL_SIZEOF_CURL_OFF_T == 8)
 
   i = 1;
   co_test[i].num = MPRNT_OFF_T_C(0x7FFFFFFFFFFFFFFF);
@@ -2869,6 +2862,7 @@
   num_cofft_tests = i;
 
 #endif
+  /* !checksrc! enable LONGLINE */
 
   for (i = 1; i <= num_cofft_tests; i++) {
 
@@ -2895,29 +2889,14 @@
   return failed;
 }
 
-static int _string_check(int linenumber, char *buf, const char *buf2) {
+static int string_check(char *buf, const char *buf2) {
   if (strcmp(buf, buf2)) {
     /* they shouldn't differ */
-    printf("sprintf line %d failed:\nwe      '%s'\nsystem: '%s'\n", linenumber,
-           buf, buf2);
+    printf("sprintf failed:\nwe '%s'\nsystem: '%s'\n", buf, buf2);
     return 1;
   }
   return 0;
 }
-#define string_check(x, y) _string_check(__LINE__, x, y)
-
-static int _strlen_check(int linenumber, char *buf, size_t len) {
-  size_t buflen = strlen(buf);
-  if (len != buflen) {
-    /* they shouldn't differ */
-    printf("sprintf strlen:%d failed:\nwe '%zu'\nsystem: '%zu'\n", linenumber,
-           buflen, len);
-    return 1;
-  }
-  return 0;
-}
-
-#define strlen_check(x, y) _strlen_check(__LINE__, x, y)
 
 /*
  * The output strings in this test need to have been verified with a system
@@ -3054,142 +3033,10 @@
   return errors;
 }
 
-/* DBL_MAX value from Linux */
-/* !checksrc! disable PLUSNOSPACE 1 */
-#define MAXIMIZE -1.7976931348623157081452E+308
-
-static int test_float_formatting(void) {
-  int errors = 0;
-  char buf[512]; /* larger than max float size */
-  curl_msnprintf(buf, sizeof(buf), "%f", 9.0);
-  errors += string_check(buf, "9.000000");
-
-  curl_msnprintf(buf, sizeof(buf), "%.1f", 9.1);
-  errors += string_check(buf, "9.1");
-
-  curl_msnprintf(buf, sizeof(buf), "%.2f", 9.1);
-  errors += string_check(buf, "9.10");
-
-  curl_msnprintf(buf, sizeof(buf), "%.0f", 9.1);
-  errors += string_check(buf, "9");
-
-  curl_msnprintf(buf, sizeof(buf), "%0f", 9.1);
-  errors += string_check(buf, "9.100000");
-
-  curl_msnprintf(buf, sizeof(buf), "%10f", 9.1);
-  errors += string_check(buf, "  9.100000");
-
-  curl_msnprintf(buf, sizeof(buf), "%10.3f", 9.1);
-  errors += string_check(buf, "     9.100");
-
-  curl_msnprintf(buf, sizeof(buf), "%-10.3f", 9.1);
-  errors += string_check(buf, "9.100     ");
-
-  curl_msnprintf(buf, sizeof(buf), "%-10.3f", 9.123456);
-  errors += string_check(buf, "9.123     ");
-
-  curl_msnprintf(buf, sizeof(buf), "%.-2f", 9.1);
-  errors += string_check(buf, "9.100000");
-
-  curl_msnprintf(buf, sizeof(buf), "%*f", 10, 9.1);
-  errors += string_check(buf, "  9.100000");
-
-  curl_msnprintf(buf, sizeof(buf), "%*f", 3, 9.1);
-  errors += string_check(buf, "9.100000");
-
-  curl_msnprintf(buf, sizeof(buf), "%*f", 6, 9.2987654);
-  errors += string_check(buf, "9.298765");
-
-  curl_msnprintf(buf, sizeof(buf), "%*f", 6, 9.298765);
-  errors += string_check(buf, "9.298765");
-
-  curl_msnprintf(buf, sizeof(buf), "%*f", 6, 9.29876);
-  errors += string_check(buf, "9.298760");
-
-  curl_msnprintf(buf, sizeof(buf), "%.*f", 6, 9.2987654);
-  errors += string_check(buf, "9.298765");
-  curl_msnprintf(buf, sizeof(buf), "%.*f", 5, 9.2987654);
-  errors += string_check(buf, "9.29877");
-  curl_msnprintf(buf, sizeof(buf), "%.*f", 4, 9.2987654);
-  errors += string_check(buf, "9.2988");
-  curl_msnprintf(buf, sizeof(buf), "%.*f", 3, 9.2987654);
-  errors += string_check(buf, "9.299");
-  curl_msnprintf(buf, sizeof(buf), "%.*f", 2, 9.2987654);
-  errors += string_check(buf, "9.30");
-  curl_msnprintf(buf, sizeof(buf), "%.*f", 1, 9.2987654);
-  errors += string_check(buf, "9.3");
-  curl_msnprintf(buf, sizeof(buf), "%.*f", 0, 9.2987654);
-  errors += string_check(buf, "9");
-
-  /* very large precisions easily turn into system specific outputs so we only
-     check the output buffer length here as we know the internal limit */
-
-  curl_msnprintf(buf, sizeof(buf), "%.*f", (1 << 30), 9.2987654);
-  errors += strlen_check(buf, 325);
-
-  curl_msnprintf(buf, sizeof(buf), "%10000.10000f", 9.2987654);
-  errors += strlen_check(buf, 325);
-
-  curl_msnprintf(buf, sizeof(buf), "%240.10000f",
-                 123456789123456789123456789.2987654);
-  errors += strlen_check(buf, 325);
-
-  /* check negative when used signed */
-  curl_msnprintf(buf, sizeof(buf), "%*f", INT_MIN, 9.1);
-  errors += string_check(buf, "9.100000");
-
-  /* curl_msnprintf() limits a single float output to 325 bytes maximum
-     width */
-  curl_msnprintf(buf, sizeof(buf), "%*f", (1 << 30), 9.1);
-  errors += string_check(
-      buf, "                                                                   "
-           "                                                                   "
-           "                                                                   "
-           "                                                                   "
-           "                                                 9.100000");
-  curl_msnprintf(buf, sizeof(buf), "%100000f", 9.1);
-  errors += string_check(
-      buf, "                                                                   "
-           "                                                                   "
-           "                                                                   "
-           "                                                                   "
-           "                                                 9.100000");
-
-  curl_msnprintf(buf, sizeof(buf), "%f", MAXIMIZE);
-  errors += strlen_check(buf, 317);
-
-  curl_msnprintf(buf, 2, "%f", MAXIMIZE);
-  errors += strlen_check(buf, 1);
-  curl_msnprintf(buf, 3, "%f", MAXIMIZE);
-  errors += strlen_check(buf, 2);
-  curl_msnprintf(buf, 4, "%f", MAXIMIZE);
-  errors += strlen_check(buf, 3);
-  curl_msnprintf(buf, 5, "%f", MAXIMIZE);
-  errors += strlen_check(buf, 4);
-  curl_msnprintf(buf, 6, "%f", MAXIMIZE);
-  errors += strlen_check(buf, 5);
-
-  if (!errors)
-    printf("All float strings tests OK!\n");
-  else
-    printf("test_float_formatting Failed!\n");
-
-  return errors;
-}
-/* !checksrc! enable LONGLINE */
-
 int test(char *URL) {
   int errors = 0;
   (void)URL; /* not used */
 
-#ifdef HAVE_SETLOCALE
-  /*
-   * The test makes assumptions about the numeric locale (specifically,
-   * RADIXCHAR) so set it to a known working (and portable) one.
-   */
-  setlocale(LC_NUMERIC, "C");
-#endif
-
   errors += test_weird_arguments();
 
   errors += test_unsigned_short_formatting();
@@ -3208,8 +3055,6 @@
 
   errors += test_string_formatting();
 
-  errors += test_float_formatting();
-
   if (errors)
     return TEST_ERR_MAJOR_BAD;
   else
